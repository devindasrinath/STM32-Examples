
Encoder UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000242c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f4  080025f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025f4  080025f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f4  080025f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  0800266c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800266c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a24a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b8  00000000  00000000  0002a2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d50  00000000  00000000  0002d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b296  00000000  00000000  00043f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088417  00000000  00000000  0004f19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d75b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  000d7608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002520 	.word	0x08002520

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002520 	.word	0x08002520

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f92b 	bl	80003b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fc2a 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f935 	bl	8000406 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f90b 	bl	80003ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f003 0307 	and.w	r3, r3, #7
 8000266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000274:	4013      	ands	r3, r2
 8000276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800028a:	4a04      	ldr	r2, [pc, #16]	; (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	60d3      	str	r3, [r2, #12]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <__NVIC_GetPriorityGrouping+0x18>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	f003 0307 	and.w	r3, r3, #7
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000310:	b480      	push	{r7}
 8000312:	b089      	sub	sp, #36	; 0x24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	f1c3 0307 	rsb	r3, r3, #7
 800032a:	2b04      	cmp	r3, #4
 800032c:	bf28      	it	cs
 800032e:	2304      	movcs	r3, #4
 8000330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	3304      	adds	r3, #4
 8000336:	2b06      	cmp	r3, #6
 8000338:	d902      	bls.n	8000340 <NVIC_EncodePriority+0x30>
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	3b03      	subs	r3, #3
 800033e:	e000      	b.n	8000342 <NVIC_EncodePriority+0x32>
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000344:	f04f 32ff 	mov.w	r2, #4294967295
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	43da      	mvns	r2, r3
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	401a      	ands	r2, r3
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000358:	f04f 31ff 	mov.w	r1, #4294967295
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43d9      	mvns	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000368:	4313      	orrs	r3, r2
         );
}
 800036a:	4618      	mov	r0, r3
 800036c:	3724      	adds	r7, #36	; 0x24
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000384:	d301      	bcc.n	800038a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000386:	2301      	movs	r3, #1
 8000388:	e00f      	b.n	80003aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <SysTick_Config+0x40>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000392:	210f      	movs	r1, #15
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f7ff ff90 	bl	80002bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <SysTick_Config+0x40>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SysTick_Config+0x40>)
 80003a4:	2207      	movs	r2, #7
 80003a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000e010 	.word	0xe000e010

080003b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff49 	bl	8000258 <__NVIC_SetPriorityGrouping>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	4603      	mov	r3, r0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003e0:	f7ff ff5e 	bl	80002a0 <__NVIC_GetPriorityGrouping>
 80003e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff90 	bl	8000310 <NVIC_EncodePriority>
 80003f0:	4602      	mov	r2, r0
 80003f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff5f 	bl	80002bc <__NVIC_SetPriority>
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff ffb0 	bl	8000374 <SysTick_Config>
 8000414:	4603      	mov	r3, r0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000420:	b480      	push	{r7}
 8000422:	b08b      	sub	sp, #44	; 0x2c
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042e:	2300      	movs	r3, #0
 8000430:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000432:	e169      	b.n	8000708 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000434:	2201      	movs	r2, #1
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	69fa      	ldr	r2, [r7, #28]
 8000444:	4013      	ands	r3, r2
 8000446:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000448:	69ba      	ldr	r2, [r7, #24]
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	429a      	cmp	r2, r3
 800044e:	f040 8158 	bne.w	8000702 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	4a9a      	ldr	r2, [pc, #616]	; (80006c0 <HAL_GPIO_Init+0x2a0>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d05e      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 800045c:	4a98      	ldr	r2, [pc, #608]	; (80006c0 <HAL_GPIO_Init+0x2a0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d875      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 8000462:	4a98      	ldr	r2, [pc, #608]	; (80006c4 <HAL_GPIO_Init+0x2a4>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d058      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 8000468:	4a96      	ldr	r2, [pc, #600]	; (80006c4 <HAL_GPIO_Init+0x2a4>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d86f      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 800046e:	4a96      	ldr	r2, [pc, #600]	; (80006c8 <HAL_GPIO_Init+0x2a8>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d052      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 8000474:	4a94      	ldr	r2, [pc, #592]	; (80006c8 <HAL_GPIO_Init+0x2a8>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d869      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 800047a:	4a94      	ldr	r2, [pc, #592]	; (80006cc <HAL_GPIO_Init+0x2ac>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d04c      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 8000480:	4a92      	ldr	r2, [pc, #584]	; (80006cc <HAL_GPIO_Init+0x2ac>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d863      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 8000486:	4a92      	ldr	r2, [pc, #584]	; (80006d0 <HAL_GPIO_Init+0x2b0>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d046      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 800048c:	4a90      	ldr	r2, [pc, #576]	; (80006d0 <HAL_GPIO_Init+0x2b0>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d85d      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 8000492:	2b12      	cmp	r3, #18
 8000494:	d82a      	bhi.n	80004ec <HAL_GPIO_Init+0xcc>
 8000496:	2b12      	cmp	r3, #18
 8000498:	d859      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 800049a:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <HAL_GPIO_Init+0x80>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	0800051b 	.word	0x0800051b
 80004a4:	080004f5 	.word	0x080004f5
 80004a8:	08000507 	.word	0x08000507
 80004ac:	08000549 	.word	0x08000549
 80004b0:	0800054f 	.word	0x0800054f
 80004b4:	0800054f 	.word	0x0800054f
 80004b8:	0800054f 	.word	0x0800054f
 80004bc:	0800054f 	.word	0x0800054f
 80004c0:	0800054f 	.word	0x0800054f
 80004c4:	0800054f 	.word	0x0800054f
 80004c8:	0800054f 	.word	0x0800054f
 80004cc:	0800054f 	.word	0x0800054f
 80004d0:	0800054f 	.word	0x0800054f
 80004d4:	0800054f 	.word	0x0800054f
 80004d8:	0800054f 	.word	0x0800054f
 80004dc:	0800054f 	.word	0x0800054f
 80004e0:	0800054f 	.word	0x0800054f
 80004e4:	080004fd 	.word	0x080004fd
 80004e8:	08000511 	.word	0x08000511
 80004ec:	4a79      	ldr	r2, [pc, #484]	; (80006d4 <HAL_GPIO_Init+0x2b4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d013      	beq.n	800051a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004f2:	e02c      	b.n	800054e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	623b      	str	r3, [r7, #32]
          break;
 80004fa:	e029      	b.n	8000550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	3304      	adds	r3, #4
 8000502:	623b      	str	r3, [r7, #32]
          break;
 8000504:	e024      	b.n	8000550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	3308      	adds	r3, #8
 800050c:	623b      	str	r3, [r7, #32]
          break;
 800050e:	e01f      	b.n	8000550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	330c      	adds	r3, #12
 8000516:	623b      	str	r3, [r7, #32]
          break;
 8000518:	e01a      	b.n	8000550 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000522:	2304      	movs	r3, #4
 8000524:	623b      	str	r3, [r7, #32]
          break;
 8000526:	e013      	b.n	8000550 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d105      	bne.n	800053c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000530:	2308      	movs	r3, #8
 8000532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	69fa      	ldr	r2, [r7, #28]
 8000538:	611a      	str	r2, [r3, #16]
          break;
 800053a:	e009      	b.n	8000550 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800053c:	2308      	movs	r3, #8
 800053e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	615a      	str	r2, [r3, #20]
          break;
 8000546:	e003      	b.n	8000550 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
          break;
 800054c:	e000      	b.n	8000550 <HAL_GPIO_Init+0x130>
          break;
 800054e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	2bff      	cmp	r3, #255	; 0xff
 8000554:	d801      	bhi.n	800055a <HAL_GPIO_Init+0x13a>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	e001      	b.n	800055e <HAL_GPIO_Init+0x13e>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3304      	adds	r3, #4
 800055e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	2bff      	cmp	r3, #255	; 0xff
 8000564:	d802      	bhi.n	800056c <HAL_GPIO_Init+0x14c>
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	e002      	b.n	8000572 <HAL_GPIO_Init+0x152>
 800056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056e:	3b08      	subs	r3, #8
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	210f      	movs	r1, #15
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	43db      	mvns	r3, r3
 8000582:	401a      	ands	r2, r3
 8000584:	6a39      	ldr	r1, [r7, #32]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	431a      	orrs	r2, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	2b00      	cmp	r3, #0
 800059c:	f000 80b1 	beq.w	8000702 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a0:	4b4d      	ldr	r3, [pc, #308]	; (80006d8 <HAL_GPIO_Init+0x2b8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a4c      	ldr	r2, [pc, #304]	; (80006d8 <HAL_GPIO_Init+0x2b8>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <HAL_GPIO_Init+0x2b8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005b8:	4a48      	ldr	r2, [pc, #288]	; (80006dc <HAL_GPIO_Init+0x2bc>)
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	089b      	lsrs	r3, r3, #2
 80005be:	3302      	adds	r3, #2
 80005c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	220f      	movs	r2, #15
 80005d0:	fa02 f303 	lsl.w	r3, r2, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a40      	ldr	r2, [pc, #256]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d013      	beq.n	800060c <HAL_GPIO_Init+0x1ec>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a3f      	ldr	r2, [pc, #252]	; (80006e4 <HAL_GPIO_Init+0x2c4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d00d      	beq.n	8000608 <HAL_GPIO_Init+0x1e8>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a3e      	ldr	r2, [pc, #248]	; (80006e8 <HAL_GPIO_Init+0x2c8>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d007      	beq.n	8000604 <HAL_GPIO_Init+0x1e4>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a3d      	ldr	r2, [pc, #244]	; (80006ec <HAL_GPIO_Init+0x2cc>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d101      	bne.n	8000600 <HAL_GPIO_Init+0x1e0>
 80005fc:	2303      	movs	r3, #3
 80005fe:	e006      	b.n	800060e <HAL_GPIO_Init+0x1ee>
 8000600:	2304      	movs	r3, #4
 8000602:	e004      	b.n	800060e <HAL_GPIO_Init+0x1ee>
 8000604:	2302      	movs	r3, #2
 8000606:	e002      	b.n	800060e <HAL_GPIO_Init+0x1ee>
 8000608:	2301      	movs	r3, #1
 800060a:	e000      	b.n	800060e <HAL_GPIO_Init+0x1ee>
 800060c:	2300      	movs	r3, #0
 800060e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000610:	f002 0203 	and.w	r2, r2, #3
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	4093      	lsls	r3, r2
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4313      	orrs	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800061e:	492f      	ldr	r1, [pc, #188]	; (80006dc <HAL_GPIO_Init+0x2bc>)
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	3302      	adds	r3, #2
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d006      	beq.n	8000646 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	492c      	ldr	r1, [pc, #176]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	4313      	orrs	r3, r2
 8000642:	600b      	str	r3, [r1, #0]
 8000644:	e006      	b.n	8000654 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	43db      	mvns	r3, r3
 800064e:	4928      	ldr	r1, [pc, #160]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000650:	4013      	ands	r3, r2
 8000652:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d006      	beq.n	800066e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	4922      	ldr	r1, [pc, #136]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	4313      	orrs	r3, r2
 800066a:	604b      	str	r3, [r1, #4]
 800066c:	e006      	b.n	800067c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	43db      	mvns	r3, r3
 8000676:	491e      	ldr	r1, [pc, #120]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000678:	4013      	ands	r3, r2
 800067a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	4918      	ldr	r1, [pc, #96]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	4313      	orrs	r3, r2
 8000692:	608b      	str	r3, [r1, #8]
 8000694:	e006      	b.n	80006a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	43db      	mvns	r3, r3
 800069e:	4914      	ldr	r1, [pc, #80]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d021      	beq.n	80006f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	490e      	ldr	r1, [pc, #56]	; (80006f0 <HAL_GPIO_Init+0x2d0>)
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	60cb      	str	r3, [r1, #12]
 80006bc:	e021      	b.n	8000702 <HAL_GPIO_Init+0x2e2>
 80006be:	bf00      	nop
 80006c0:	10320000 	.word	0x10320000
 80006c4:	10310000 	.word	0x10310000
 80006c8:	10220000 	.word	0x10220000
 80006cc:	10210000 	.word	0x10210000
 80006d0:	10120000 	.word	0x10120000
 80006d4:	10110000 	.word	0x10110000
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000
 80006e0:	40010800 	.word	0x40010800
 80006e4:	40010c00 	.word	0x40010c00
 80006e8:	40011000 	.word	0x40011000
 80006ec:	40011400 	.word	0x40011400
 80006f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_GPIO_Init+0x304>)
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4909      	ldr	r1, [pc, #36]	; (8000724 <HAL_GPIO_Init+0x304>)
 80006fe:	4013      	ands	r3, r2
 8000700:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	3301      	adds	r3, #1
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	f47f ae8e 	bne.w	8000434 <HAL_GPIO_Init+0x14>
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	372c      	adds	r7, #44	; 0x2c
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40010400 	.word	0x40010400

08000728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	4013      	ands	r3, r2
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e001      	b.n	800074a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
	...

08000758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e26c      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	f000 8087 	beq.w	8000886 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000778:	4b92      	ldr	r3, [pc, #584]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	2b04      	cmp	r3, #4
 8000782:	d00c      	beq.n	800079e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000784:	4b8f      	ldr	r3, [pc, #572]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b08      	cmp	r3, #8
 800078e:	d112      	bne.n	80007b6 <HAL_RCC_OscConfig+0x5e>
 8000790:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079c:	d10b      	bne.n	80007b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079e:	4b89      	ldr	r3, [pc, #548]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d06c      	beq.n	8000884 <HAL_RCC_OscConfig+0x12c>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d168      	bne.n	8000884 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e246      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007be:	d106      	bne.n	80007ce <HAL_RCC_OscConfig+0x76>
 80007c0:	4b80      	ldr	r3, [pc, #512]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a7f      	ldr	r2, [pc, #508]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	e02e      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10c      	bne.n	80007f0 <HAL_RCC_OscConfig+0x98>
 80007d6:	4b7b      	ldr	r3, [pc, #492]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a7a      	ldr	r2, [pc, #488]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b78      	ldr	r3, [pc, #480]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a77      	ldr	r2, [pc, #476]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	e01d      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f8:	d10c      	bne.n	8000814 <HAL_RCC_OscConfig+0xbc>
 80007fa:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a71      	ldr	r2, [pc, #452]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a6e      	ldr	r2, [pc, #440]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e00b      	b.n	800082c <HAL_RCC_OscConfig+0xd4>
 8000814:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a6a      	ldr	r2, [pc, #424]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800081a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b68      	ldr	r3, [pc, #416]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a67      	ldr	r2, [pc, #412]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d013      	beq.n	800085c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000834:	f7ff fce2 	bl	80001fc <HAL_GetTick>
 8000838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083a:	e008      	b.n	800084e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800083c:	f7ff fcde 	bl	80001fc <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2b64      	cmp	r3, #100	; 0x64
 8000848:	d901      	bls.n	800084e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800084a:	2303      	movs	r3, #3
 800084c:	e1fa      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084e:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f0      	beq.n	800083c <HAL_RCC_OscConfig+0xe4>
 800085a:	e014      	b.n	8000886 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800085c:	f7ff fcce 	bl	80001fc <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000862:	e008      	b.n	8000876 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000864:	f7ff fcca 	bl	80001fc <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b64      	cmp	r3, #100	; 0x64
 8000870:	d901      	bls.n	8000876 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e1e6      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f0      	bne.n	8000864 <HAL_RCC_OscConfig+0x10c>
 8000882:	e000      	b.n	8000886 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d063      	beq.n	800095a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00b      	beq.n	80008b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800089e:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d11c      	bne.n	80008e4 <HAL_RCC_OscConfig+0x18c>
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d116      	bne.n	80008e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <HAL_RCC_OscConfig+0x176>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d001      	beq.n	80008ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e1ba      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4939      	ldr	r1, [pc, #228]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 80008de:	4313      	orrs	r3, r2
 80008e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e2:	e03a      	b.n	800095a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d020      	beq.n	800092e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <HAL_RCC_OscConfig+0x270>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f2:	f7ff fc83 	bl	80001fc <HAL_GetTick>
 80008f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008fa:	f7ff fc7f 	bl	80001fc <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e19b      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f0      	beq.n	80008fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	4927      	ldr	r1, [pc, #156]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000928:	4313      	orrs	r3, r2
 800092a:	600b      	str	r3, [r1, #0]
 800092c:	e015      	b.n	800095a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <HAL_RCC_OscConfig+0x270>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000934:	f7ff fc62 	bl	80001fc <HAL_GetTick>
 8000938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	e008      	b.n	800094e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff fc5e 	bl	80001fc <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b02      	cmp	r3, #2
 8000948:	d901      	bls.n	800094e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e17a      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f0      	bne.n	800093c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	2b00      	cmp	r3, #0
 8000964:	d03a      	beq.n	80009dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d019      	beq.n	80009a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_RCC_OscConfig+0x274>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000974:	f7ff fc42 	bl	80001fc <HAL_GetTick>
 8000978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	e008      	b.n	800098e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800097c:	f7ff fc3e 	bl	80001fc <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d901      	bls.n	800098e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e15a      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_RCC_OscConfig+0x26c>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f0      	beq.n	800097c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f000 fad8 	bl	8000f50 <RCC_Delay>
 80009a0:	e01c      	b.n	80009dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_RCC_OscConfig+0x274>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a8:	f7ff fc28 	bl	80001fc <HAL_GetTick>
 80009ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ae:	e00f      	b.n	80009d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009b0:	f7ff fc24 	bl	80001fc <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d908      	bls.n	80009d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e140      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	42420000 	.word	0x42420000
 80009cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d0:	4b9e      	ldr	r3, [pc, #632]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e9      	bne.n	80009b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80a6 	beq.w	8000b36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ee:	4b97      	ldr	r3, [pc, #604]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10d      	bne.n	8000a16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b94      	ldr	r3, [pc, #592]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a93      	ldr	r2, [pc, #588]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b91      	ldr	r3, [pc, #580]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a12:	2301      	movs	r3, #1
 8000a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a16:	4b8e      	ldr	r3, [pc, #568]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d118      	bne.n	8000a54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a22:	4b8b      	ldr	r3, [pc, #556]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a8a      	ldr	r2, [pc, #552]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fbe5 	bl	80001fc <HAL_GetTick>
 8000a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	e008      	b.n	8000a48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a36:	f7ff fbe1 	bl	80001fc <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b64      	cmp	r3, #100	; 0x64
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e0fd      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a48:	4b81      	ldr	r3, [pc, #516]	; (8000c50 <HAL_RCC_OscConfig+0x4f8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f0      	beq.n	8000a36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <HAL_RCC_OscConfig+0x312>
 8000a5c:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a7a      	ldr	r2, [pc, #488]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6213      	str	r3, [r2, #32]
 8000a68:	e02d      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10c      	bne.n	8000a8c <HAL_RCC_OscConfig+0x334>
 8000a72:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a75      	ldr	r2, [pc, #468]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	6213      	str	r3, [r2, #32]
 8000a7e:	4b73      	ldr	r3, [pc, #460]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a72      	ldr	r2, [pc, #456]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a84:	f023 0304 	bic.w	r3, r3, #4
 8000a88:	6213      	str	r3, [r2, #32]
 8000a8a:	e01c      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	d10c      	bne.n	8000aae <HAL_RCC_OscConfig+0x356>
 8000a94:	4b6d      	ldr	r3, [pc, #436]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	4a6c      	ldr	r2, [pc, #432]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6213      	str	r3, [r2, #32]
 8000aa0:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4a69      	ldr	r2, [pc, #420]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6213      	str	r3, [r2, #32]
 8000aac:	e00b      	b.n	8000ac6 <HAL_RCC_OscConfig+0x36e>
 8000aae:	4b67      	ldr	r3, [pc, #412]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a66      	ldr	r2, [pc, #408]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6213      	str	r3, [r2, #32]
 8000aba:	4b64      	ldr	r3, [pc, #400]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a63      	ldr	r2, [pc, #396]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
 8000ac4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d015      	beq.n	8000afa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ace:	f7ff fb95 	bl	80001fc <HAL_GetTick>
 8000ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	e00a      	b.n	8000aec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fb91 	bl	80001fc <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d901      	bls.n	8000aec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e0ab      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0ee      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x37e>
 8000af8:	e014      	b.n	8000b24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afa:	f7ff fb7f 	bl	80001fc <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b00:	e00a      	b.n	8000b18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e095      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b18:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1ee      	bne.n	8000b02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d105      	bne.n	8000b36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b2a:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a47      	ldr	r2, [pc, #284]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8081 	beq.w	8000c42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b40:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 030c 	and.w	r3, r3, #12
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d061      	beq.n	8000c10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d146      	bne.n	8000be2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <HAL_RCC_OscConfig+0x4fc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5a:	f7ff fb4f 	bl	80001fc <HAL_GetTick>
 8000b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b62:	f7ff fb4b 	bl	80001fc <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e067      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1f0      	bne.n	8000b62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d108      	bne.n	8000b9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	492d      	ldr	r1, [pc, #180]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a19      	ldr	r1, [r3, #32]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	430b      	orrs	r3, r1
 8000bae:	4927      	ldr	r1, [pc, #156]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_RCC_OscConfig+0x4fc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bba:	f7ff fb1f 	bl	80001fc <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bc2:	f7ff fb1b 	bl	80001fc <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e037      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x46a>
 8000be0:	e02f      	b.n	8000c42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_RCC_OscConfig+0x4fc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fb08 	bl	80001fc <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf0:	f7ff fb04 	bl	80001fc <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e020      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x498>
 8000c0e:	e018      	b.n	8000c42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e013      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_RCC_OscConfig+0x4f4>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d106      	bne.n	8000c3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d001      	beq.n	8000c42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40007000 	.word	0x40007000
 8000c54:	42420060 	.word	0x42420060

08000c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0d0      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c6c:	4b6a      	ldr	r3, [pc, #424]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d910      	bls.n	8000c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7a:	4b67      	ldr	r3, [pc, #412]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 0207 	bic.w	r2, r3, #7
 8000c82:	4965      	ldr	r1, [pc, #404]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8a:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d001      	beq.n	8000c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0b8      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d020      	beq.n	8000cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb4:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0308 	and.w	r3, r3, #8
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ccc:	4b53      	ldr	r3, [pc, #332]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd8:	4b50      	ldr	r3, [pc, #320]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	494d      	ldr	r1, [pc, #308]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d040      	beq.n	8000d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d115      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e07f      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d107      	bne.n	8000d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d109      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e073      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e06b      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f023 0203 	bic.w	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4936      	ldr	r1, [pc, #216]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d48:	f7ff fa58 	bl	80001fc <HAL_GetTick>
 8000d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4e:	e00a      	b.n	8000d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d50:	f7ff fa54 	bl	80001fc <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e053      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 020c 	and.w	r2, r3, #12
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d1eb      	bne.n	8000d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d210      	bcs.n	8000da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 0207 	bic.w	r2, r3, #7
 8000d8e:	4922      	ldr	r1, [pc, #136]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_RCC_ClockConfig+0x1c0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d001      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e032      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4916      	ldr	r1, [pc, #88]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d009      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000de6:	f000 f821 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 8000dea:	4602      	mov	r2, r0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	490a      	ldr	r1, [pc, #40]	; (8000e20 <HAL_RCC_ClockConfig+0x1c8>)
 8000df8:	5ccb      	ldrb	r3, [r1, r3]
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_RCC_ClockConfig+0x1cc>)
 8000e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_RCC_ClockConfig+0x1d0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9b6 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40022000 	.word	0x40022000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	080025a8 	.word	0x080025a8
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000

08000e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e2c:	b490      	push	{r4, r7}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e34:	1d3c      	adds	r4, r7, #4
 8000e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e3c:	f240 2301 	movw	r3, #513	; 0x201
 8000e40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d002      	beq.n	8000e6c <HAL_RCC_GetSysClockFreq+0x40>
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d003      	beq.n	8000e72 <HAL_RCC_GetSysClockFreq+0x46>
 8000e6a:	e02d      	b.n	8000ec8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e6e:	623b      	str	r3, [r7, #32]
      break;
 8000e70:	e02d      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	0c9b      	lsrs	r3, r3, #18
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e7e:	4413      	add	r3, r2
 8000e80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	0c5b      	lsrs	r3, r3, #17
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ea4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eaa:	fb02 f203 	mul.w	r2, r2, r3
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	e004      	b.n	8000ec2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	623b      	str	r3, [r7, #32]
      break;
 8000ec6:	e002      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eca:	623b      	str	r3, [r7, #32]
      break;
 8000ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ece:	6a3b      	ldr	r3, [r7, #32]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc90      	pop	{r4, r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	08002538 	.word	0x08002538
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	007a1200 	.word	0x007a1200
 8000ee8:	003d0900 	.word	0x003d0900

08000eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_RCC_GetHCLKFreq+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f04:	f7ff fff2 	bl	8000eec <HAL_RCC_GetHCLKFreq>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	4903      	ldr	r1, [pc, #12]	; (8000f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f16:	5ccb      	ldrb	r3, [r1, r3]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	080025b8 	.word	0x080025b8

08000f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_RCC_GetHCLKFreq>
 8000f30:	4602      	mov	r2, r0
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	0adb      	lsrs	r3, r3, #11
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	4903      	ldr	r1, [pc, #12]	; (8000f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f3e:	5ccb      	ldrb	r3, [r1, r3]
 8000f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	080025b8 	.word	0x080025b8

08000f50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <RCC_Delay+0x34>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <RCC_Delay+0x38>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0a5b      	lsrs	r3, r3, #9
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f6c:	bf00      	nop
  }
  while (Delay --);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	60fa      	str	r2, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f9      	bne.n	8000f6c <RCC_Delay+0x1c>
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000008 	.word	0x20000008
 8000f88:	10624dd3 	.word	0x10624dd3

08000f8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e093      	b.n	80010c8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d106      	bne.n	8000fba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fd35 	bl	8001a24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fd0:	f023 0307 	bic.w	r3, r3, #7
 8000fd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f000 f903 	bl	80011ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	4313      	orrs	r3, r2
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800102c:	f023 030c 	bic.w	r3, r3, #12
 8001030:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800103c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	4313      	orrs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	011a      	lsls	r2, r3, #4
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	031b      	lsls	r3, r3, #12
 800105c:	4313      	orrs	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800106a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4313      	orrs	r3, r2
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80010e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80010f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d110      	bne.n	8001122 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d102      	bne.n	800110c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001106:	7b7b      	ldrb	r3, [r7, #13]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d001      	beq.n	8001110 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e069      	b.n	80011e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001120:	e031      	b.n	8001186 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b04      	cmp	r3, #4
 8001126:	d110      	bne.n	800114a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800112e:	7b3b      	ldrb	r3, [r7, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d001      	beq.n	8001138 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e055      	b.n	80011e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001148:	e01d      	b.n	8001186 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d105      	bne.n	8001162 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001156:	7b7b      	ldrb	r3, [r7, #13]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d102      	bne.n	8001162 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800115c:	7b3b      	ldrb	r3, [r7, #12]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e03e      	b.n	80011e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2202      	movs	r2, #2
 8001172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2202      	movs	r2, #2
 8001182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_TIM_Encoder_Start+0xc4>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d008      	beq.n	80011a4 <HAL_TIM_Encoder_Start+0xd4>
 8001192:	e00f      	b.n	80011b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f887 	bl	80012b0 <TIM_CCxChannelCmd>
      break;
 80011a2:	e016      	b.n	80011d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f87f 	bl	80012b0 <TIM_CCxChannelCmd>
      break;
 80011b2:	e00e      	b.n	80011d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f877 	bl	80012b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2201      	movs	r2, #1
 80011c8:	2104      	movs	r1, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f870 	bl	80012b0 <TIM_CCxChannelCmd>
      break;
 80011d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f042 0201 	orr.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <TIM_Base_SetConfig+0xb8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d00b      	beq.n	800121c <TIM_Base_SetConfig+0x30>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120a:	d007      	beq.n	800121c <TIM_Base_SetConfig+0x30>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <TIM_Base_SetConfig+0xbc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d003      	beq.n	800121c <TIM_Base_SetConfig+0x30>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <TIM_Base_SetConfig+0xc0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d108      	bne.n	800122e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <TIM_Base_SetConfig+0xb8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00b      	beq.n	800124e <TIM_Base_SetConfig+0x62>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800123c:	d007      	beq.n	800124e <TIM_Base_SetConfig+0x62>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <TIM_Base_SetConfig+0xbc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d003      	beq.n	800124e <TIM_Base_SetConfig+0x62>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <TIM_Base_SetConfig+0xc0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d108      	bne.n	8001260 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <TIM_Base_SetConfig+0xb8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d103      	bne.n	8001294 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	615a      	str	r2, [r3, #20]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	40000400 	.word	0x40000400
 80012ac:	40000800 	.word	0x40000800

080012b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	2201      	movs	r2, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a1a      	ldr	r2, [r3, #32]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	431a      	orrs	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	621a      	str	r2, [r3, #32]
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800130c:	2302      	movs	r3, #2
 800130e:	e046      	b.n	800139e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d00e      	beq.n	8001372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d009      	beq.n	8001372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d004      	beq.n	8001372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10c      	bne.n	800138c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	4313      	orrs	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40000400 	.word	0x40000400
 80013b0:	40000800 	.word	0x40000800

080013b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e03f      	b.n	8001446 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fb5e 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f905 	bl	8001608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800140c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800141c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800142c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2220      	movs	r2, #32
 8001438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08a      	sub	sp, #40	; 0x28
 8001452:	af02      	add	r7, sp, #8
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b20      	cmp	r3, #32
 800146c:	d17c      	bne.n	8001568 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <HAL_UART_Transmit+0x2c>
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e075      	b.n	800156a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_UART_Transmit+0x3e>
 8001488:	2302      	movs	r3, #2
 800148a:	e06e      	b.n	800156a <HAL_UART_Transmit+0x11c>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2221      	movs	r2, #33	; 0x21
 800149e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014a2:	f7fe feab 	bl	80001fc <HAL_GetTick>
 80014a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	88fa      	ldrh	r2, [r7, #6]
 80014b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014bc:	d108      	bne.n	80014d0 <HAL_UART_Transmit+0x82>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d104      	bne.n	80014d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e003      	b.n	80014d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014e0:	e02a      	b.n	8001538 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2200      	movs	r2, #0
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 f840 	bl	8001572 <UART_WaitOnFlagUntilTimeout>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e036      	b.n	800156a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10b      	bne.n	800151a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	3302      	adds	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	e007      	b.n	800152a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3301      	adds	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800152e:	b29b      	uxth	r3, r3
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800153c:	b29b      	uxth	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1cf      	bne.n	80014e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2200      	movs	r2, #0
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f810 	bl	8001572 <UART_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e006      	b.n	800156a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e000      	b.n	800156a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001568:	2302      	movs	r3, #2
  }
}
 800156a:	4618      	mov	r0, r3
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001582:	e02c      	b.n	80015de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d028      	beq.n	80015de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001592:	f7fe fe33 	bl	80001fc <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d21d      	bcs.n	80015de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e00f      	b.n	80015fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4013      	ands	r3, r2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	bf0c      	ite	eq
 80015ee:	2301      	moveq	r3, #1
 80015f0:	2300      	movne	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d0c3      	beq.n	8001584 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001642:	f023 030c 	bic.w	r3, r3, #12
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	430b      	orrs	r3, r1
 800164e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <UART_SetConfig+0x114>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d103      	bne.n	8001678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001670:	f7ff fc5a 	bl	8000f28 <HAL_RCC_GetPCLK2Freq>
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	e002      	b.n	800167e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001678:	f7ff fc42 	bl	8000f00 <HAL_RCC_GetPCLK1Freq>
 800167c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009a      	lsls	r2, r3, #2
 8001688:	441a      	add	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <UART_SetConfig+0x118>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	0119      	lsls	r1, r3, #4
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009a      	lsls	r2, r3, #2
 80016a8:	441a      	add	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <UART_SetConfig+0x118>)
 80016b6:	fba3 0302 	umull	r0, r3, r3, r2
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	fb00 f303 	mul.w	r3, r0, r3
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	3332      	adds	r3, #50	; 0x32
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <UART_SetConfig+0x118>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d4:	4419      	add	r1, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009a      	lsls	r2, r3, #2
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <UART_SetConfig+0x118>)
 80016ee:	fba3 0302 	umull	r0, r3, r3, r2
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	fb00 f303 	mul.w	r3, r0, r3
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	3332      	adds	r3, #50	; 0x32
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <UART_SetConfig+0x118>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	f003 020f 	and.w	r2, r3, #15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	440a      	add	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40013800 	.word	0x40013800
 8001720:	51eb851f 	.word	0x51eb851f

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint8_t msg[50] = {'\0'};
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	222e      	movs	r2, #46	; 0x2e
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fab0 	bl	8001c9c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f7fe fd06 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f83e 	bl	80017c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f000 f900 	bl	8001948 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001748:	f000 f880 	bl	800184c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800174c:	f000 f8d2 	bl	80018f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001750:	213c      	movs	r1, #60	; 0x3c
 8001752:	4816      	ldr	r0, [pc, #88]	; (80017ac <main+0x88>)
 8001754:	f7ff fcbc 	bl	80010d0 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //(TIM2->CNT)>>2 -----> get counts from register
      if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2))
 8001758:	2104      	movs	r1, #4
 800175a:	4815      	ldr	r0, [pc, #84]	; (80017b0 <main+0x8c>)
 800175c:	f7fe ffe4 	bl	8000728 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00f      	beq.n	8001786 <main+0x62>
      {
          sprintf(msg, "Encoder Switch Released, Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 8001766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	089a      	lsrs	r2, r3, #2
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4910      	ldr	r1, [pc, #64]	; (80017b4 <main+0x90>)
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fa9a 	bl	8001cac <siprintf>
          HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8001778:	1d39      	adds	r1, r7, #4
 800177a:	2364      	movs	r3, #100	; 0x64
 800177c:	2232      	movs	r2, #50	; 0x32
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <main+0x94>)
 8001780:	f7ff fe65 	bl	800144e <HAL_UART_Transmit>
 8001784:	e00e      	b.n	80017a4 <main+0x80>
      }
      else
      {
          sprintf(msg, "Encoder Switch Pressed,  Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 8001786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	089a      	lsrs	r2, r3, #2
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	490a      	ldr	r1, [pc, #40]	; (80017bc <main+0x98>)
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fa8a 	bl	8001cac <siprintf>
          HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8001798:	1d39      	adds	r1, r7, #4
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	2232      	movs	r2, #50	; 0x32
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <main+0x94>)
 80017a0:	f7ff fe55 	bl	800144e <HAL_UART_Transmit>
      }
      HAL_Delay(100);
 80017a4:	2064      	movs	r0, #100	; 0x64
 80017a6:	f7fe fd33 	bl	8000210 <HAL_Delay>
      if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2))
 80017aa:	e7d5      	b.n	8001758 <main+0x34>
 80017ac:	200000e0 	.word	0x200000e0
 80017b0:	40010800 	.word	0x40010800
 80017b4:	08002548 	.word	0x08002548
 80017b8:	2000009c 	.word	0x2000009c
 80017bc:	08002578 	.word	0x08002578

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b090      	sub	sp, #64	; 0x40
 80017c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	2228      	movs	r2, #40	; 0x28
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa64 	bl	8001c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe ffa5 	bl	8000758 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001814:	f000 f8ce 	bl	80019b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2302      	movs	r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa10 	bl	8000c58 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800183e:	f000 f8b9 	bl	80019b4 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3740      	adds	r7, #64	; 0x40
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fa1e 	bl	8001c9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_TIM2_Init+0xa4>)
 800186a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_TIM2_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_TIM2_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_TIM2_Init+0xa4>)
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_TIM2_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM2_Init+0xa4>)
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001890:	2303      	movs	r3, #3
 8001892:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018a0:	230a      	movs	r3, #10
 80018a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018a8:	2301      	movs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4619      	mov	r1, r3
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_TIM2_Init+0xa4>)
 80018bc:	f7ff fb66 	bl	8000f8c <HAL_TIM_Encoder_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80018c6:	f000 f875 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM2_Init+0xa4>)
 80018d8:	f7ff fd0e 	bl	80012f8 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80018e2:	f000 f867 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3730      	adds	r7, #48	; 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200000e0 	.word	0x200000e0

080018f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_USART1_UART_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800192c:	f7ff fd42 	bl	80013b4 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001936:	f000 f83d 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000009c 	.word	0x2000009c
 8001944:	40013800 	.word	0x40013800

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MX_GPIO_Init+0x64>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_GPIO_Init+0x64>)
 8001962:	f043 0320 	orr.w	r3, r3, #32
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_GPIO_Init+0x64>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <MX_GPIO_Init+0x64>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <MX_GPIO_Init+0x64>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_GPIO_Init+0x64>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800198c:	2304      	movs	r3, #4
 800198e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	4619      	mov	r1, r3
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_GPIO_Init+0x68>)
 80019a0:	f7fe fd3e 	bl	8000420 <HAL_GPIO_Init>

}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010800 	.word	0x40010800

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_MspInit+0x5c>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_MspInit+0x5c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_MspInit+0x5c>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x5c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x5c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x5c>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_MspInit+0x60>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_MspInit+0x60>)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000

08001a24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a42:	d123      	bne.n	8001a8c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	61d3      	str	r3, [r2, #28]
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_TIM_Encoder_MspInit+0x70>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a74:	2303      	movs	r3, #3
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x74>)
 8001a88:	f7fe fcca 	bl	8000420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010800 	.word	0x40010800

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_UART_MspInit+0x8c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d131      	bne.n	8001b20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <HAL_UART_MspInit+0x94>)
 8001b02:	f7fe fc8d 	bl	8000420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_UART_MspInit+0x94>)
 8001b1c:	f7fe fc80 	bl	8000420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f7fe fb2d 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f000 f848 	bl	8001c48 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20005000 	.word	0x20005000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	2000008c 	.word	0x2000008c
 8001bec:	20000138 	.word	0x20000138

08001bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	; (8001c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c22:	f7ff ffe5 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c26:	f000 f815 	bl	8001c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2a:	f7ff fd7b 	bl	8001724 <main>
  bx lr
 8001c2e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c38:	080025fc 	.word	0x080025fc
  ldr r2, =_sbss
 8001c3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c40:	20000138 	.word	0x20000138

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>
	...

08001c48 <__errno>:
 8001c48:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <__errno+0x8>)
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	2000000c 	.word	0x2000000c

08001c54 <__libc_init_array>:
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	2600      	movs	r6, #0
 8001c58:	4d0c      	ldr	r5, [pc, #48]	; (8001c8c <__libc_init_array+0x38>)
 8001c5a:	4c0d      	ldr	r4, [pc, #52]	; (8001c90 <__libc_init_array+0x3c>)
 8001c5c:	1b64      	subs	r4, r4, r5
 8001c5e:	10a4      	asrs	r4, r4, #2
 8001c60:	42a6      	cmp	r6, r4
 8001c62:	d109      	bne.n	8001c78 <__libc_init_array+0x24>
 8001c64:	f000 fc5c 	bl	8002520 <_init>
 8001c68:	2600      	movs	r6, #0
 8001c6a:	4d0a      	ldr	r5, [pc, #40]	; (8001c94 <__libc_init_array+0x40>)
 8001c6c:	4c0a      	ldr	r4, [pc, #40]	; (8001c98 <__libc_init_array+0x44>)
 8001c6e:	1b64      	subs	r4, r4, r5
 8001c70:	10a4      	asrs	r4, r4, #2
 8001c72:	42a6      	cmp	r6, r4
 8001c74:	d105      	bne.n	8001c82 <__libc_init_array+0x2e>
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
 8001c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c7c:	4798      	blx	r3
 8001c7e:	3601      	adds	r6, #1
 8001c80:	e7ee      	b.n	8001c60 <__libc_init_array+0xc>
 8001c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c86:	4798      	blx	r3
 8001c88:	3601      	adds	r6, #1
 8001c8a:	e7f2      	b.n	8001c72 <__libc_init_array+0x1e>
 8001c8c:	080025f4 	.word	0x080025f4
 8001c90:	080025f4 	.word	0x080025f4
 8001c94:	080025f4 	.word	0x080025f4
 8001c98:	080025f8 	.word	0x080025f8

08001c9c <memset>:
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4402      	add	r2, r0
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d100      	bne.n	8001ca6 <memset+0xa>
 8001ca4:	4770      	bx	lr
 8001ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8001caa:	e7f9      	b.n	8001ca0 <memset+0x4>

08001cac <siprintf>:
 8001cac:	b40e      	push	{r1, r2, r3}
 8001cae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001cb2:	b500      	push	{lr}
 8001cb4:	b09c      	sub	sp, #112	; 0x70
 8001cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8001cb8:	9002      	str	r0, [sp, #8]
 8001cba:	9006      	str	r0, [sp, #24]
 8001cbc:	9107      	str	r1, [sp, #28]
 8001cbe:	9104      	str	r1, [sp, #16]
 8001cc0:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <siprintf+0x38>)
 8001cc2:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <siprintf+0x3c>)
 8001cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cc8:	9105      	str	r1, [sp, #20]
 8001cca:	6800      	ldr	r0, [r0, #0]
 8001ccc:	a902      	add	r1, sp, #8
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	f000 f868 	bl	8001da4 <_svfiprintf_r>
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	9b02      	ldr	r3, [sp, #8]
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	b01c      	add	sp, #112	; 0x70
 8001cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ce0:	b003      	add	sp, #12
 8001ce2:	4770      	bx	lr
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	ffff0208 	.word	0xffff0208

08001cec <__ssputs_r>:
 8001cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf0:	688e      	ldr	r6, [r1, #8]
 8001cf2:	4682      	mov	sl, r0
 8001cf4:	429e      	cmp	r6, r3
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4690      	mov	r8, r2
 8001cfa:	461f      	mov	r7, r3
 8001cfc:	d838      	bhi.n	8001d70 <__ssputs_r+0x84>
 8001cfe:	898a      	ldrh	r2, [r1, #12]
 8001d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001d04:	d032      	beq.n	8001d6c <__ssputs_r+0x80>
 8001d06:	6825      	ldr	r5, [r4, #0]
 8001d08:	6909      	ldr	r1, [r1, #16]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	eba5 0901 	sub.w	r9, r5, r1
 8001d10:	6965      	ldr	r5, [r4, #20]
 8001d12:	444b      	add	r3, r9
 8001d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d1c:	106d      	asrs	r5, r5, #1
 8001d1e:	429d      	cmp	r5, r3
 8001d20:	bf38      	it	cc
 8001d22:	461d      	movcc	r5, r3
 8001d24:	0553      	lsls	r3, r2, #21
 8001d26:	d531      	bpl.n	8001d8c <__ssputs_r+0xa0>
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f000 fb53 	bl	80023d4 <_malloc_r>
 8001d2e:	4606      	mov	r6, r0
 8001d30:	b950      	cbnz	r0, 8001d48 <__ssputs_r+0x5c>
 8001d32:	230c      	movs	r3, #12
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f8ca 3000 	str.w	r3, [sl]
 8001d3c:	89a3      	ldrh	r3, [r4, #12]
 8001d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d42:	81a3      	strh	r3, [r4, #12]
 8001d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d48:	464a      	mov	r2, r9
 8001d4a:	6921      	ldr	r1, [r4, #16]
 8001d4c:	f000 face 	bl	80022ec <memcpy>
 8001d50:	89a3      	ldrh	r3, [r4, #12]
 8001d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5a:	81a3      	strh	r3, [r4, #12]
 8001d5c:	6126      	str	r6, [r4, #16]
 8001d5e:	444e      	add	r6, r9
 8001d60:	6026      	str	r6, [r4, #0]
 8001d62:	463e      	mov	r6, r7
 8001d64:	6165      	str	r5, [r4, #20]
 8001d66:	eba5 0509 	sub.w	r5, r5, r9
 8001d6a:	60a5      	str	r5, [r4, #8]
 8001d6c:	42be      	cmp	r6, r7
 8001d6e:	d900      	bls.n	8001d72 <__ssputs_r+0x86>
 8001d70:	463e      	mov	r6, r7
 8001d72:	4632      	mov	r2, r6
 8001d74:	4641      	mov	r1, r8
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	f000 fac6 	bl	8002308 <memmove>
 8001d7c:	68a3      	ldr	r3, [r4, #8]
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	1b9b      	subs	r3, r3, r6
 8001d82:	4432      	add	r2, r6
 8001d84:	2000      	movs	r0, #0
 8001d86:	60a3      	str	r3, [r4, #8]
 8001d88:	6022      	str	r2, [r4, #0]
 8001d8a:	e7db      	b.n	8001d44 <__ssputs_r+0x58>
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	f000 fb7b 	bl	8002488 <_realloc_r>
 8001d92:	4606      	mov	r6, r0
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d1e1      	bne.n	8001d5c <__ssputs_r+0x70>
 8001d98:	4650      	mov	r0, sl
 8001d9a:	6921      	ldr	r1, [r4, #16]
 8001d9c:	f000 face 	bl	800233c <_free_r>
 8001da0:	e7c7      	b.n	8001d32 <__ssputs_r+0x46>
	...

08001da4 <_svfiprintf_r>:
 8001da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da8:	4698      	mov	r8, r3
 8001daa:	898b      	ldrh	r3, [r1, #12]
 8001dac:	4607      	mov	r7, r0
 8001dae:	061b      	lsls	r3, r3, #24
 8001db0:	460d      	mov	r5, r1
 8001db2:	4614      	mov	r4, r2
 8001db4:	b09d      	sub	sp, #116	; 0x74
 8001db6:	d50e      	bpl.n	8001dd6 <_svfiprintf_r+0x32>
 8001db8:	690b      	ldr	r3, [r1, #16]
 8001dba:	b963      	cbnz	r3, 8001dd6 <_svfiprintf_r+0x32>
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	f000 fb09 	bl	80023d4 <_malloc_r>
 8001dc2:	6028      	str	r0, [r5, #0]
 8001dc4:	6128      	str	r0, [r5, #16]
 8001dc6:	b920      	cbnz	r0, 8001dd2 <_svfiprintf_r+0x2e>
 8001dc8:	230c      	movs	r3, #12
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	e0d1      	b.n	8001f76 <_svfiprintf_r+0x1d2>
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	616b      	str	r3, [r5, #20]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8001dda:	2320      	movs	r3, #32
 8001ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001de0:	2330      	movs	r3, #48	; 0x30
 8001de2:	f04f 0901 	mov.w	r9, #1
 8001de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001dea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001f90 <_svfiprintf_r+0x1ec>
 8001dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001df2:	4623      	mov	r3, r4
 8001df4:	469a      	mov	sl, r3
 8001df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001dfa:	b10a      	cbz	r2, 8001e00 <_svfiprintf_r+0x5c>
 8001dfc:	2a25      	cmp	r2, #37	; 0x25
 8001dfe:	d1f9      	bne.n	8001df4 <_svfiprintf_r+0x50>
 8001e00:	ebba 0b04 	subs.w	fp, sl, r4
 8001e04:	d00b      	beq.n	8001e1e <_svfiprintf_r+0x7a>
 8001e06:	465b      	mov	r3, fp
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4638      	mov	r0, r7
 8001e0e:	f7ff ff6d 	bl	8001cec <__ssputs_r>
 8001e12:	3001      	adds	r0, #1
 8001e14:	f000 80aa 	beq.w	8001f6c <_svfiprintf_r+0x1c8>
 8001e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e1a:	445a      	add	r2, fp
 8001e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8001e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80a2 	beq.w	8001f6c <_svfiprintf_r+0x1c8>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e32:	f10a 0a01 	add.w	sl, sl, #1
 8001e36:	9304      	str	r3, [sp, #16]
 8001e38:	9307      	str	r3, [sp, #28]
 8001e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8001e40:	4654      	mov	r4, sl
 8001e42:	2205      	movs	r2, #5
 8001e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e48:	4851      	ldr	r0, [pc, #324]	; (8001f90 <_svfiprintf_r+0x1ec>)
 8001e4a:	f000 fa41 	bl	80022d0 <memchr>
 8001e4e:	9a04      	ldr	r2, [sp, #16]
 8001e50:	b9d8      	cbnz	r0, 8001e8a <_svfiprintf_r+0xe6>
 8001e52:	06d0      	lsls	r0, r2, #27
 8001e54:	bf44      	itt	mi
 8001e56:	2320      	movmi	r3, #32
 8001e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e5c:	0711      	lsls	r1, r2, #28
 8001e5e:	bf44      	itt	mi
 8001e60:	232b      	movmi	r3, #43	; 0x2b
 8001e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e66:	f89a 3000 	ldrb.w	r3, [sl]
 8001e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e6c:	d015      	beq.n	8001e9a <_svfiprintf_r+0xf6>
 8001e6e:	4654      	mov	r4, sl
 8001e70:	2000      	movs	r0, #0
 8001e72:	f04f 0c0a 	mov.w	ip, #10
 8001e76:	9a07      	ldr	r2, [sp, #28]
 8001e78:	4621      	mov	r1, r4
 8001e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e7e:	3b30      	subs	r3, #48	; 0x30
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d94e      	bls.n	8001f22 <_svfiprintf_r+0x17e>
 8001e84:	b1b0      	cbz	r0, 8001eb4 <_svfiprintf_r+0x110>
 8001e86:	9207      	str	r2, [sp, #28]
 8001e88:	e014      	b.n	8001eb4 <_svfiprintf_r+0x110>
 8001e8a:	eba0 0308 	sub.w	r3, r0, r8
 8001e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	46a2      	mov	sl, r4
 8001e96:	9304      	str	r3, [sp, #16]
 8001e98:	e7d2      	b.n	8001e40 <_svfiprintf_r+0x9c>
 8001e9a:	9b03      	ldr	r3, [sp, #12]
 8001e9c:	1d19      	adds	r1, r3, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	9103      	str	r1, [sp, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bfbb      	ittet	lt
 8001ea6:	425b      	neglt	r3, r3
 8001ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8001eac:	9307      	strge	r3, [sp, #28]
 8001eae:	9307      	strlt	r3, [sp, #28]
 8001eb0:	bfb8      	it	lt
 8001eb2:	9204      	strlt	r2, [sp, #16]
 8001eb4:	7823      	ldrb	r3, [r4, #0]
 8001eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8001eb8:	d10c      	bne.n	8001ed4 <_svfiprintf_r+0x130>
 8001eba:	7863      	ldrb	r3, [r4, #1]
 8001ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8001ebe:	d135      	bne.n	8001f2c <_svfiprintf_r+0x188>
 8001ec0:	9b03      	ldr	r3, [sp, #12]
 8001ec2:	3402      	adds	r4, #2
 8001ec4:	1d1a      	adds	r2, r3, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	9203      	str	r2, [sp, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bfb8      	it	lt
 8001ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ed2:	9305      	str	r3, [sp, #20]
 8001ed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001fa0 <_svfiprintf_r+0x1fc>
 8001ed8:	2203      	movs	r2, #3
 8001eda:	4650      	mov	r0, sl
 8001edc:	7821      	ldrb	r1, [r4, #0]
 8001ede:	f000 f9f7 	bl	80022d0 <memchr>
 8001ee2:	b140      	cbz	r0, 8001ef6 <_svfiprintf_r+0x152>
 8001ee4:	2340      	movs	r3, #64	; 0x40
 8001ee6:	eba0 000a 	sub.w	r0, r0, sl
 8001eea:	fa03 f000 	lsl.w	r0, r3, r0
 8001eee:	9b04      	ldr	r3, [sp, #16]
 8001ef0:	3401      	adds	r4, #1
 8001ef2:	4303      	orrs	r3, r0
 8001ef4:	9304      	str	r3, [sp, #16]
 8001ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001efa:	2206      	movs	r2, #6
 8001efc:	4825      	ldr	r0, [pc, #148]	; (8001f94 <_svfiprintf_r+0x1f0>)
 8001efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f02:	f000 f9e5 	bl	80022d0 <memchr>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d038      	beq.n	8001f7c <_svfiprintf_r+0x1d8>
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <_svfiprintf_r+0x1f4>)
 8001f0c:	bb1b      	cbnz	r3, 8001f56 <_svfiprintf_r+0x1b2>
 8001f0e:	9b03      	ldr	r3, [sp, #12]
 8001f10:	3307      	adds	r3, #7
 8001f12:	f023 0307 	bic.w	r3, r3, #7
 8001f16:	3308      	adds	r3, #8
 8001f18:	9303      	str	r3, [sp, #12]
 8001f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f1c:	4433      	add	r3, r6
 8001f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f20:	e767      	b.n	8001df2 <_svfiprintf_r+0x4e>
 8001f22:	460c      	mov	r4, r1
 8001f24:	2001      	movs	r0, #1
 8001f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f2a:	e7a5      	b.n	8001e78 <_svfiprintf_r+0xd4>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f04f 0c0a 	mov.w	ip, #10
 8001f32:	4619      	mov	r1, r3
 8001f34:	3401      	adds	r4, #1
 8001f36:	9305      	str	r3, [sp, #20]
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f3e:	3a30      	subs	r2, #48	; 0x30
 8001f40:	2a09      	cmp	r2, #9
 8001f42:	d903      	bls.n	8001f4c <_svfiprintf_r+0x1a8>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0c5      	beq.n	8001ed4 <_svfiprintf_r+0x130>
 8001f48:	9105      	str	r1, [sp, #20]
 8001f4a:	e7c3      	b.n	8001ed4 <_svfiprintf_r+0x130>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	2301      	movs	r3, #1
 8001f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f54:	e7f0      	b.n	8001f38 <_svfiprintf_r+0x194>
 8001f56:	ab03      	add	r3, sp, #12
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	4638      	mov	r0, r7
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <_svfiprintf_r+0x1f8>)
 8001f60:	a904      	add	r1, sp, #16
 8001f62:	f3af 8000 	nop.w
 8001f66:	1c42      	adds	r2, r0, #1
 8001f68:	4606      	mov	r6, r0
 8001f6a:	d1d6      	bne.n	8001f1a <_svfiprintf_r+0x176>
 8001f6c:	89ab      	ldrh	r3, [r5, #12]
 8001f6e:	065b      	lsls	r3, r3, #25
 8001f70:	f53f af2c 	bmi.w	8001dcc <_svfiprintf_r+0x28>
 8001f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f76:	b01d      	add	sp, #116	; 0x74
 8001f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f7c:	ab03      	add	r3, sp, #12
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	462a      	mov	r2, r5
 8001f82:	4638      	mov	r0, r7
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <_svfiprintf_r+0x1f8>)
 8001f86:	a904      	add	r1, sp, #16
 8001f88:	f000 f87c 	bl	8002084 <_printf_i>
 8001f8c:	e7eb      	b.n	8001f66 <_svfiprintf_r+0x1c2>
 8001f8e:	bf00      	nop
 8001f90:	080025c0 	.word	0x080025c0
 8001f94:	080025ca 	.word	0x080025ca
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	08001ced 	.word	0x08001ced
 8001fa0:	080025c6 	.word	0x080025c6

08001fa4 <_printf_common>:
 8001fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa8:	4616      	mov	r6, r2
 8001faa:	4699      	mov	r9, r3
 8001fac:	688a      	ldr	r2, [r1, #8]
 8001fae:	690b      	ldr	r3, [r1, #16]
 8001fb0:	4607      	mov	r7, r0
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	bfb8      	it	lt
 8001fb6:	4613      	movlt	r3, r2
 8001fb8:	6033      	str	r3, [r6, #0]
 8001fba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001fc4:	b10a      	cbz	r2, 8001fca <_printf_common+0x26>
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	6033      	str	r3, [r6, #0]
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	0699      	lsls	r1, r3, #26
 8001fce:	bf42      	ittt	mi
 8001fd0:	6833      	ldrmi	r3, [r6, #0]
 8001fd2:	3302      	addmi	r3, #2
 8001fd4:	6033      	strmi	r3, [r6, #0]
 8001fd6:	6825      	ldr	r5, [r4, #0]
 8001fd8:	f015 0506 	ands.w	r5, r5, #6
 8001fdc:	d106      	bne.n	8001fec <_printf_common+0x48>
 8001fde:	f104 0a19 	add.w	sl, r4, #25
 8001fe2:	68e3      	ldr	r3, [r4, #12]
 8001fe4:	6832      	ldr	r2, [r6, #0]
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	42ab      	cmp	r3, r5
 8001fea:	dc28      	bgt.n	800203e <_printf_common+0x9a>
 8001fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ff0:	1e13      	subs	r3, r2, #0
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	bf18      	it	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	0692      	lsls	r2, r2, #26
 8001ffa:	d42d      	bmi.n	8002058 <_printf_common+0xb4>
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	4638      	mov	r0, r7
 8002000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002004:	47c0      	blx	r8
 8002006:	3001      	adds	r0, #1
 8002008:	d020      	beq.n	800204c <_printf_common+0xa8>
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	68e5      	ldr	r5, [r4, #12]
 800200e:	f003 0306 	and.w	r3, r3, #6
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf18      	it	ne
 8002016:	2500      	movne	r5, #0
 8002018:	6832      	ldr	r2, [r6, #0]
 800201a:	f04f 0600 	mov.w	r6, #0
 800201e:	68a3      	ldr	r3, [r4, #8]
 8002020:	bf08      	it	eq
 8002022:	1aad      	subeq	r5, r5, r2
 8002024:	6922      	ldr	r2, [r4, #16]
 8002026:	bf08      	it	eq
 8002028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800202c:	4293      	cmp	r3, r2
 800202e:	bfc4      	itt	gt
 8002030:	1a9b      	subgt	r3, r3, r2
 8002032:	18ed      	addgt	r5, r5, r3
 8002034:	341a      	adds	r4, #26
 8002036:	42b5      	cmp	r5, r6
 8002038:	d11a      	bne.n	8002070 <_printf_common+0xcc>
 800203a:	2000      	movs	r0, #0
 800203c:	e008      	b.n	8002050 <_printf_common+0xac>
 800203e:	2301      	movs	r3, #1
 8002040:	4652      	mov	r2, sl
 8002042:	4649      	mov	r1, r9
 8002044:	4638      	mov	r0, r7
 8002046:	47c0      	blx	r8
 8002048:	3001      	adds	r0, #1
 800204a:	d103      	bne.n	8002054 <_printf_common+0xb0>
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002054:	3501      	adds	r5, #1
 8002056:	e7c4      	b.n	8001fe2 <_printf_common+0x3e>
 8002058:	2030      	movs	r0, #48	; 0x30
 800205a:	18e1      	adds	r1, r4, r3
 800205c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002066:	4422      	add	r2, r4
 8002068:	3302      	adds	r3, #2
 800206a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800206e:	e7c5      	b.n	8001ffc <_printf_common+0x58>
 8002070:	2301      	movs	r3, #1
 8002072:	4622      	mov	r2, r4
 8002074:	4649      	mov	r1, r9
 8002076:	4638      	mov	r0, r7
 8002078:	47c0      	blx	r8
 800207a:	3001      	adds	r0, #1
 800207c:	d0e6      	beq.n	800204c <_printf_common+0xa8>
 800207e:	3601      	adds	r6, #1
 8002080:	e7d9      	b.n	8002036 <_printf_common+0x92>
	...

08002084 <_printf_i>:
 8002084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002088:	460c      	mov	r4, r1
 800208a:	7e27      	ldrb	r7, [r4, #24]
 800208c:	4691      	mov	r9, r2
 800208e:	2f78      	cmp	r7, #120	; 0x78
 8002090:	4680      	mov	r8, r0
 8002092:	469a      	mov	sl, r3
 8002094:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800209a:	d807      	bhi.n	80020ac <_printf_i+0x28>
 800209c:	2f62      	cmp	r7, #98	; 0x62
 800209e:	d80a      	bhi.n	80020b6 <_printf_i+0x32>
 80020a0:	2f00      	cmp	r7, #0
 80020a2:	f000 80d9 	beq.w	8002258 <_printf_i+0x1d4>
 80020a6:	2f58      	cmp	r7, #88	; 0x58
 80020a8:	f000 80a4 	beq.w	80021f4 <_printf_i+0x170>
 80020ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80020b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80020b4:	e03a      	b.n	800212c <_printf_i+0xa8>
 80020b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80020ba:	2b15      	cmp	r3, #21
 80020bc:	d8f6      	bhi.n	80020ac <_printf_i+0x28>
 80020be:	a001      	add	r0, pc, #4	; (adr r0, 80020c4 <_printf_i+0x40>)
 80020c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80020c4:	0800211d 	.word	0x0800211d
 80020c8:	08002131 	.word	0x08002131
 80020cc:	080020ad 	.word	0x080020ad
 80020d0:	080020ad 	.word	0x080020ad
 80020d4:	080020ad 	.word	0x080020ad
 80020d8:	080020ad 	.word	0x080020ad
 80020dc:	08002131 	.word	0x08002131
 80020e0:	080020ad 	.word	0x080020ad
 80020e4:	080020ad 	.word	0x080020ad
 80020e8:	080020ad 	.word	0x080020ad
 80020ec:	080020ad 	.word	0x080020ad
 80020f0:	0800223f 	.word	0x0800223f
 80020f4:	08002161 	.word	0x08002161
 80020f8:	08002221 	.word	0x08002221
 80020fc:	080020ad 	.word	0x080020ad
 8002100:	080020ad 	.word	0x080020ad
 8002104:	08002261 	.word	0x08002261
 8002108:	080020ad 	.word	0x080020ad
 800210c:	08002161 	.word	0x08002161
 8002110:	080020ad 	.word	0x080020ad
 8002114:	080020ad 	.word	0x080020ad
 8002118:	08002229 	.word	0x08002229
 800211c:	680b      	ldr	r3, [r1, #0]
 800211e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002122:	1d1a      	adds	r2, r3, #4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	600a      	str	r2, [r1, #0]
 8002128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800212c:	2301      	movs	r3, #1
 800212e:	e0a4      	b.n	800227a <_printf_i+0x1f6>
 8002130:	6825      	ldr	r5, [r4, #0]
 8002132:	6808      	ldr	r0, [r1, #0]
 8002134:	062e      	lsls	r6, r5, #24
 8002136:	f100 0304 	add.w	r3, r0, #4
 800213a:	d50a      	bpl.n	8002152 <_printf_i+0xce>
 800213c:	6805      	ldr	r5, [r0, #0]
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	2d00      	cmp	r5, #0
 8002142:	da03      	bge.n	800214c <_printf_i+0xc8>
 8002144:	232d      	movs	r3, #45	; 0x2d
 8002146:	426d      	negs	r5, r5
 8002148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800214c:	230a      	movs	r3, #10
 800214e:	485e      	ldr	r0, [pc, #376]	; (80022c8 <_printf_i+0x244>)
 8002150:	e019      	b.n	8002186 <_printf_i+0x102>
 8002152:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002156:	6805      	ldr	r5, [r0, #0]
 8002158:	600b      	str	r3, [r1, #0]
 800215a:	bf18      	it	ne
 800215c:	b22d      	sxthne	r5, r5
 800215e:	e7ef      	b.n	8002140 <_printf_i+0xbc>
 8002160:	680b      	ldr	r3, [r1, #0]
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	1d18      	adds	r0, r3, #4
 8002166:	6008      	str	r0, [r1, #0]
 8002168:	0628      	lsls	r0, r5, #24
 800216a:	d501      	bpl.n	8002170 <_printf_i+0xec>
 800216c:	681d      	ldr	r5, [r3, #0]
 800216e:	e002      	b.n	8002176 <_printf_i+0xf2>
 8002170:	0669      	lsls	r1, r5, #25
 8002172:	d5fb      	bpl.n	800216c <_printf_i+0xe8>
 8002174:	881d      	ldrh	r5, [r3, #0]
 8002176:	2f6f      	cmp	r7, #111	; 0x6f
 8002178:	bf0c      	ite	eq
 800217a:	2308      	moveq	r3, #8
 800217c:	230a      	movne	r3, #10
 800217e:	4852      	ldr	r0, [pc, #328]	; (80022c8 <_printf_i+0x244>)
 8002180:	2100      	movs	r1, #0
 8002182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002186:	6866      	ldr	r6, [r4, #4]
 8002188:	2e00      	cmp	r6, #0
 800218a:	bfa8      	it	ge
 800218c:	6821      	ldrge	r1, [r4, #0]
 800218e:	60a6      	str	r6, [r4, #8]
 8002190:	bfa4      	itt	ge
 8002192:	f021 0104 	bicge.w	r1, r1, #4
 8002196:	6021      	strge	r1, [r4, #0]
 8002198:	b90d      	cbnz	r5, 800219e <_printf_i+0x11a>
 800219a:	2e00      	cmp	r6, #0
 800219c:	d04d      	beq.n	800223a <_printf_i+0x1b6>
 800219e:	4616      	mov	r6, r2
 80021a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80021a4:	fb03 5711 	mls	r7, r3, r1, r5
 80021a8:	5dc7      	ldrb	r7, [r0, r7]
 80021aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021ae:	462f      	mov	r7, r5
 80021b0:	42bb      	cmp	r3, r7
 80021b2:	460d      	mov	r5, r1
 80021b4:	d9f4      	bls.n	80021a0 <_printf_i+0x11c>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d10b      	bne.n	80021d2 <_printf_i+0x14e>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	07df      	lsls	r7, r3, #31
 80021be:	d508      	bpl.n	80021d2 <_printf_i+0x14e>
 80021c0:	6923      	ldr	r3, [r4, #16]
 80021c2:	6861      	ldr	r1, [r4, #4]
 80021c4:	4299      	cmp	r1, r3
 80021c6:	bfde      	ittt	le
 80021c8:	2330      	movle	r3, #48	; 0x30
 80021ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80021ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80021d2:	1b92      	subs	r2, r2, r6
 80021d4:	6122      	str	r2, [r4, #16]
 80021d6:	464b      	mov	r3, r9
 80021d8:	4621      	mov	r1, r4
 80021da:	4640      	mov	r0, r8
 80021dc:	f8cd a000 	str.w	sl, [sp]
 80021e0:	aa03      	add	r2, sp, #12
 80021e2:	f7ff fedf 	bl	8001fa4 <_printf_common>
 80021e6:	3001      	adds	r0, #1
 80021e8:	d14c      	bne.n	8002284 <_printf_i+0x200>
 80021ea:	f04f 30ff 	mov.w	r0, #4294967295
 80021ee:	b004      	add	sp, #16
 80021f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f4:	4834      	ldr	r0, [pc, #208]	; (80022c8 <_printf_i+0x244>)
 80021f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80021fa:	680e      	ldr	r6, [r1, #0]
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8002202:	061f      	lsls	r7, r3, #24
 8002204:	600e      	str	r6, [r1, #0]
 8002206:	d514      	bpl.n	8002232 <_printf_i+0x1ae>
 8002208:	07d9      	lsls	r1, r3, #31
 800220a:	bf44      	itt	mi
 800220c:	f043 0320 	orrmi.w	r3, r3, #32
 8002210:	6023      	strmi	r3, [r4, #0]
 8002212:	b91d      	cbnz	r5, 800221c <_printf_i+0x198>
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f023 0320 	bic.w	r3, r3, #32
 800221a:	6023      	str	r3, [r4, #0]
 800221c:	2310      	movs	r3, #16
 800221e:	e7af      	b.n	8002180 <_printf_i+0xfc>
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	f043 0320 	orr.w	r3, r3, #32
 8002226:	6023      	str	r3, [r4, #0]
 8002228:	2378      	movs	r3, #120	; 0x78
 800222a:	4828      	ldr	r0, [pc, #160]	; (80022cc <_printf_i+0x248>)
 800222c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002230:	e7e3      	b.n	80021fa <_printf_i+0x176>
 8002232:	065e      	lsls	r6, r3, #25
 8002234:	bf48      	it	mi
 8002236:	b2ad      	uxthmi	r5, r5
 8002238:	e7e6      	b.n	8002208 <_printf_i+0x184>
 800223a:	4616      	mov	r6, r2
 800223c:	e7bb      	b.n	80021b6 <_printf_i+0x132>
 800223e:	680b      	ldr	r3, [r1, #0]
 8002240:	6826      	ldr	r6, [r4, #0]
 8002242:	1d1d      	adds	r5, r3, #4
 8002244:	6960      	ldr	r0, [r4, #20]
 8002246:	600d      	str	r5, [r1, #0]
 8002248:	0635      	lsls	r5, r6, #24
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	d501      	bpl.n	8002252 <_printf_i+0x1ce>
 800224e:	6018      	str	r0, [r3, #0]
 8002250:	e002      	b.n	8002258 <_printf_i+0x1d4>
 8002252:	0671      	lsls	r1, r6, #25
 8002254:	d5fb      	bpl.n	800224e <_printf_i+0x1ca>
 8002256:	8018      	strh	r0, [r3, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	4616      	mov	r6, r2
 800225c:	6123      	str	r3, [r4, #16]
 800225e:	e7ba      	b.n	80021d6 <_printf_i+0x152>
 8002260:	680b      	ldr	r3, [r1, #0]
 8002262:	1d1a      	adds	r2, r3, #4
 8002264:	600a      	str	r2, [r1, #0]
 8002266:	681e      	ldr	r6, [r3, #0]
 8002268:	2100      	movs	r1, #0
 800226a:	4630      	mov	r0, r6
 800226c:	6862      	ldr	r2, [r4, #4]
 800226e:	f000 f82f 	bl	80022d0 <memchr>
 8002272:	b108      	cbz	r0, 8002278 <_printf_i+0x1f4>
 8002274:	1b80      	subs	r0, r0, r6
 8002276:	6060      	str	r0, [r4, #4]
 8002278:	6863      	ldr	r3, [r4, #4]
 800227a:	6123      	str	r3, [r4, #16]
 800227c:	2300      	movs	r3, #0
 800227e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002282:	e7a8      	b.n	80021d6 <_printf_i+0x152>
 8002284:	4632      	mov	r2, r6
 8002286:	4649      	mov	r1, r9
 8002288:	4640      	mov	r0, r8
 800228a:	6923      	ldr	r3, [r4, #16]
 800228c:	47d0      	blx	sl
 800228e:	3001      	adds	r0, #1
 8002290:	d0ab      	beq.n	80021ea <_printf_i+0x166>
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	079b      	lsls	r3, r3, #30
 8002296:	d413      	bmi.n	80022c0 <_printf_i+0x23c>
 8002298:	68e0      	ldr	r0, [r4, #12]
 800229a:	9b03      	ldr	r3, [sp, #12]
 800229c:	4298      	cmp	r0, r3
 800229e:	bfb8      	it	lt
 80022a0:	4618      	movlt	r0, r3
 80022a2:	e7a4      	b.n	80021ee <_printf_i+0x16a>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4632      	mov	r2, r6
 80022a8:	4649      	mov	r1, r9
 80022aa:	4640      	mov	r0, r8
 80022ac:	47d0      	blx	sl
 80022ae:	3001      	adds	r0, #1
 80022b0:	d09b      	beq.n	80021ea <_printf_i+0x166>
 80022b2:	3501      	adds	r5, #1
 80022b4:	68e3      	ldr	r3, [r4, #12]
 80022b6:	9903      	ldr	r1, [sp, #12]
 80022b8:	1a5b      	subs	r3, r3, r1
 80022ba:	42ab      	cmp	r3, r5
 80022bc:	dcf2      	bgt.n	80022a4 <_printf_i+0x220>
 80022be:	e7eb      	b.n	8002298 <_printf_i+0x214>
 80022c0:	2500      	movs	r5, #0
 80022c2:	f104 0619 	add.w	r6, r4, #25
 80022c6:	e7f5      	b.n	80022b4 <_printf_i+0x230>
 80022c8:	080025d1 	.word	0x080025d1
 80022cc:	080025e2 	.word	0x080025e2

080022d0 <memchr>:
 80022d0:	4603      	mov	r3, r0
 80022d2:	b510      	push	{r4, lr}
 80022d4:	b2c9      	uxtb	r1, r1
 80022d6:	4402      	add	r2, r0
 80022d8:	4293      	cmp	r3, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	d101      	bne.n	80022e2 <memchr+0x12>
 80022de:	2000      	movs	r0, #0
 80022e0:	e003      	b.n	80022ea <memchr+0x1a>
 80022e2:	7804      	ldrb	r4, [r0, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	428c      	cmp	r4, r1
 80022e8:	d1f6      	bne.n	80022d8 <memchr+0x8>
 80022ea:	bd10      	pop	{r4, pc}

080022ec <memcpy>:
 80022ec:	440a      	add	r2, r1
 80022ee:	4291      	cmp	r1, r2
 80022f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80022f4:	d100      	bne.n	80022f8 <memcpy+0xc>
 80022f6:	4770      	bx	lr
 80022f8:	b510      	push	{r4, lr}
 80022fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022fe:	4291      	cmp	r1, r2
 8002300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002304:	d1f9      	bne.n	80022fa <memcpy+0xe>
 8002306:	bd10      	pop	{r4, pc}

08002308 <memmove>:
 8002308:	4288      	cmp	r0, r1
 800230a:	b510      	push	{r4, lr}
 800230c:	eb01 0402 	add.w	r4, r1, r2
 8002310:	d902      	bls.n	8002318 <memmove+0x10>
 8002312:	4284      	cmp	r4, r0
 8002314:	4623      	mov	r3, r4
 8002316:	d807      	bhi.n	8002328 <memmove+0x20>
 8002318:	1e43      	subs	r3, r0, #1
 800231a:	42a1      	cmp	r1, r4
 800231c:	d008      	beq.n	8002330 <memmove+0x28>
 800231e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002326:	e7f8      	b.n	800231a <memmove+0x12>
 8002328:	4601      	mov	r1, r0
 800232a:	4402      	add	r2, r0
 800232c:	428a      	cmp	r2, r1
 800232e:	d100      	bne.n	8002332 <memmove+0x2a>
 8002330:	bd10      	pop	{r4, pc}
 8002332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800233a:	e7f7      	b.n	800232c <memmove+0x24>

0800233c <_free_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4605      	mov	r5, r0
 8002340:	2900      	cmp	r1, #0
 8002342:	d043      	beq.n	80023cc <_free_r+0x90>
 8002344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002348:	1f0c      	subs	r4, r1, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	bfb8      	it	lt
 800234e:	18e4      	addlt	r4, r4, r3
 8002350:	f000 f8d0 	bl	80024f4 <__malloc_lock>
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <_free_r+0x94>)
 8002356:	6813      	ldr	r3, [r2, #0]
 8002358:	4610      	mov	r0, r2
 800235a:	b933      	cbnz	r3, 800236a <_free_r+0x2e>
 800235c:	6063      	str	r3, [r4, #4]
 800235e:	6014      	str	r4, [r2, #0]
 8002360:	4628      	mov	r0, r5
 8002362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002366:	f000 b8cb 	b.w	8002500 <__malloc_unlock>
 800236a:	42a3      	cmp	r3, r4
 800236c:	d90a      	bls.n	8002384 <_free_r+0x48>
 800236e:	6821      	ldr	r1, [r4, #0]
 8002370:	1862      	adds	r2, r4, r1
 8002372:	4293      	cmp	r3, r2
 8002374:	bf01      	itttt	eq
 8002376:	681a      	ldreq	r2, [r3, #0]
 8002378:	685b      	ldreq	r3, [r3, #4]
 800237a:	1852      	addeq	r2, r2, r1
 800237c:	6022      	streq	r2, [r4, #0]
 800237e:	6063      	str	r3, [r4, #4]
 8002380:	6004      	str	r4, [r0, #0]
 8002382:	e7ed      	b.n	8002360 <_free_r+0x24>
 8002384:	461a      	mov	r2, r3
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b10b      	cbz	r3, 800238e <_free_r+0x52>
 800238a:	42a3      	cmp	r3, r4
 800238c:	d9fa      	bls.n	8002384 <_free_r+0x48>
 800238e:	6811      	ldr	r1, [r2, #0]
 8002390:	1850      	adds	r0, r2, r1
 8002392:	42a0      	cmp	r0, r4
 8002394:	d10b      	bne.n	80023ae <_free_r+0x72>
 8002396:	6820      	ldr	r0, [r4, #0]
 8002398:	4401      	add	r1, r0
 800239a:	1850      	adds	r0, r2, r1
 800239c:	4283      	cmp	r3, r0
 800239e:	6011      	str	r1, [r2, #0]
 80023a0:	d1de      	bne.n	8002360 <_free_r+0x24>
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4401      	add	r1, r0
 80023a8:	6011      	str	r1, [r2, #0]
 80023aa:	6053      	str	r3, [r2, #4]
 80023ac:	e7d8      	b.n	8002360 <_free_r+0x24>
 80023ae:	d902      	bls.n	80023b6 <_free_r+0x7a>
 80023b0:	230c      	movs	r3, #12
 80023b2:	602b      	str	r3, [r5, #0]
 80023b4:	e7d4      	b.n	8002360 <_free_r+0x24>
 80023b6:	6820      	ldr	r0, [r4, #0]
 80023b8:	1821      	adds	r1, r4, r0
 80023ba:	428b      	cmp	r3, r1
 80023bc:	bf01      	itttt	eq
 80023be:	6819      	ldreq	r1, [r3, #0]
 80023c0:	685b      	ldreq	r3, [r3, #4]
 80023c2:	1809      	addeq	r1, r1, r0
 80023c4:	6021      	streq	r1, [r4, #0]
 80023c6:	6063      	str	r3, [r4, #4]
 80023c8:	6054      	str	r4, [r2, #4]
 80023ca:	e7c9      	b.n	8002360 <_free_r+0x24>
 80023cc:	bd38      	pop	{r3, r4, r5, pc}
 80023ce:	bf00      	nop
 80023d0:	20000090 	.word	0x20000090

080023d4 <_malloc_r>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	1ccd      	adds	r5, r1, #3
 80023d8:	f025 0503 	bic.w	r5, r5, #3
 80023dc:	3508      	adds	r5, #8
 80023de:	2d0c      	cmp	r5, #12
 80023e0:	bf38      	it	cc
 80023e2:	250c      	movcc	r5, #12
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	4606      	mov	r6, r0
 80023e8:	db01      	blt.n	80023ee <_malloc_r+0x1a>
 80023ea:	42a9      	cmp	r1, r5
 80023ec:	d903      	bls.n	80023f6 <_malloc_r+0x22>
 80023ee:	230c      	movs	r3, #12
 80023f0:	6033      	str	r3, [r6, #0]
 80023f2:	2000      	movs	r0, #0
 80023f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023f6:	f000 f87d 	bl	80024f4 <__malloc_lock>
 80023fa:	4921      	ldr	r1, [pc, #132]	; (8002480 <_malloc_r+0xac>)
 80023fc:	680a      	ldr	r2, [r1, #0]
 80023fe:	4614      	mov	r4, r2
 8002400:	b99c      	cbnz	r4, 800242a <_malloc_r+0x56>
 8002402:	4f20      	ldr	r7, [pc, #128]	; (8002484 <_malloc_r+0xb0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b923      	cbnz	r3, 8002412 <_malloc_r+0x3e>
 8002408:	4621      	mov	r1, r4
 800240a:	4630      	mov	r0, r6
 800240c:	f000 f862 	bl	80024d4 <_sbrk_r>
 8002410:	6038      	str	r0, [r7, #0]
 8002412:	4629      	mov	r1, r5
 8002414:	4630      	mov	r0, r6
 8002416:	f000 f85d 	bl	80024d4 <_sbrk_r>
 800241a:	1c43      	adds	r3, r0, #1
 800241c:	d123      	bne.n	8002466 <_malloc_r+0x92>
 800241e:	230c      	movs	r3, #12
 8002420:	4630      	mov	r0, r6
 8002422:	6033      	str	r3, [r6, #0]
 8002424:	f000 f86c 	bl	8002500 <__malloc_unlock>
 8002428:	e7e3      	b.n	80023f2 <_malloc_r+0x1e>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	1b5b      	subs	r3, r3, r5
 800242e:	d417      	bmi.n	8002460 <_malloc_r+0x8c>
 8002430:	2b0b      	cmp	r3, #11
 8002432:	d903      	bls.n	800243c <_malloc_r+0x68>
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	441c      	add	r4, r3
 8002438:	6025      	str	r5, [r4, #0]
 800243a:	e004      	b.n	8002446 <_malloc_r+0x72>
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	42a2      	cmp	r2, r4
 8002440:	bf0c      	ite	eq
 8002442:	600b      	streq	r3, [r1, #0]
 8002444:	6053      	strne	r3, [r2, #4]
 8002446:	4630      	mov	r0, r6
 8002448:	f000 f85a 	bl	8002500 <__malloc_unlock>
 800244c:	f104 000b 	add.w	r0, r4, #11
 8002450:	1d23      	adds	r3, r4, #4
 8002452:	f020 0007 	bic.w	r0, r0, #7
 8002456:	1ac2      	subs	r2, r0, r3
 8002458:	d0cc      	beq.n	80023f4 <_malloc_r+0x20>
 800245a:	1a1b      	subs	r3, r3, r0
 800245c:	50a3      	str	r3, [r4, r2]
 800245e:	e7c9      	b.n	80023f4 <_malloc_r+0x20>
 8002460:	4622      	mov	r2, r4
 8002462:	6864      	ldr	r4, [r4, #4]
 8002464:	e7cc      	b.n	8002400 <_malloc_r+0x2c>
 8002466:	1cc4      	adds	r4, r0, #3
 8002468:	f024 0403 	bic.w	r4, r4, #3
 800246c:	42a0      	cmp	r0, r4
 800246e:	d0e3      	beq.n	8002438 <_malloc_r+0x64>
 8002470:	1a21      	subs	r1, r4, r0
 8002472:	4630      	mov	r0, r6
 8002474:	f000 f82e 	bl	80024d4 <_sbrk_r>
 8002478:	3001      	adds	r0, #1
 800247a:	d1dd      	bne.n	8002438 <_malloc_r+0x64>
 800247c:	e7cf      	b.n	800241e <_malloc_r+0x4a>
 800247e:	bf00      	nop
 8002480:	20000090 	.word	0x20000090
 8002484:	20000094 	.word	0x20000094

08002488 <_realloc_r>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	4607      	mov	r7, r0
 800248c:	4614      	mov	r4, r2
 800248e:	460e      	mov	r6, r1
 8002490:	b921      	cbnz	r1, 800249c <_realloc_r+0x14>
 8002492:	4611      	mov	r1, r2
 8002494:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002498:	f7ff bf9c 	b.w	80023d4 <_malloc_r>
 800249c:	b922      	cbnz	r2, 80024a8 <_realloc_r+0x20>
 800249e:	f7ff ff4d 	bl	800233c <_free_r>
 80024a2:	4625      	mov	r5, r4
 80024a4:	4628      	mov	r0, r5
 80024a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a8:	f000 f830 	bl	800250c <_malloc_usable_size_r>
 80024ac:	42a0      	cmp	r0, r4
 80024ae:	d20f      	bcs.n	80024d0 <_realloc_r+0x48>
 80024b0:	4621      	mov	r1, r4
 80024b2:	4638      	mov	r0, r7
 80024b4:	f7ff ff8e 	bl	80023d4 <_malloc_r>
 80024b8:	4605      	mov	r5, r0
 80024ba:	2800      	cmp	r0, #0
 80024bc:	d0f2      	beq.n	80024a4 <_realloc_r+0x1c>
 80024be:	4631      	mov	r1, r6
 80024c0:	4622      	mov	r2, r4
 80024c2:	f7ff ff13 	bl	80022ec <memcpy>
 80024c6:	4631      	mov	r1, r6
 80024c8:	4638      	mov	r0, r7
 80024ca:	f7ff ff37 	bl	800233c <_free_r>
 80024ce:	e7e9      	b.n	80024a4 <_realloc_r+0x1c>
 80024d0:	4635      	mov	r5, r6
 80024d2:	e7e7      	b.n	80024a4 <_realloc_r+0x1c>

080024d4 <_sbrk_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	2300      	movs	r3, #0
 80024d8:	4d05      	ldr	r5, [pc, #20]	; (80024f0 <_sbrk_r+0x1c>)
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	f7ff fb50 	bl	8001b84 <_sbrk>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_sbrk_r+0x1a>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_sbrk_r+0x1a>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	20000128 	.word	0x20000128

080024f4 <__malloc_lock>:
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <__malloc_lock+0x8>)
 80024f6:	f000 b811 	b.w	800251c <__retarget_lock_acquire_recursive>
 80024fa:	bf00      	nop
 80024fc:	20000130 	.word	0x20000130

08002500 <__malloc_unlock>:
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <__malloc_unlock+0x8>)
 8002502:	f000 b80c 	b.w	800251e <__retarget_lock_release_recursive>
 8002506:	bf00      	nop
 8002508:	20000130 	.word	0x20000130

0800250c <_malloc_usable_size_r>:
 800250c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002510:	1f18      	subs	r0, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	bfbc      	itt	lt
 8002516:	580b      	ldrlt	r3, [r1, r0]
 8002518:	18c0      	addlt	r0, r0, r3
 800251a:	4770      	bx	lr

0800251c <__retarget_lock_acquire_recursive>:
 800251c:	4770      	bx	lr

0800251e <__retarget_lock_release_recursive>:
 800251e:	4770      	bx	lr

08002520 <_init>:
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002522:	bf00      	nop
 8002524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002526:	bc08      	pop	{r3}
 8002528:	469e      	mov	lr, r3
 800252a:	4770      	bx	lr

0800252c <_fini>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr
