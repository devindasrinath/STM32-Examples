
Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b90  08001b90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b90  08001b90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b90  08001b90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b94  08001b94  00011b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001ba4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001ba4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003432  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000103f  00000000  00000000  00023467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  000244a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000368  00000000  00000000  000248a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015aea  00000000  00000000  00024c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004eb7  00000000  00000000  0003a6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bb76  00000000  00000000  0003f5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bb127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc0  00000000  00000000  000bb17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b28 	.word	0x08001b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b28 	.word	0x08001b28

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f907 	bl	8000370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fc2a 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f911 	bl	80003be <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8e7 	bl	8000386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000040 	.word	0x20000040

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000040 	.word	0x20000040

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <__NVIC_SetPriority+0x4c>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4908      	ldr	r1, [pc, #32]	; (80002c4 <__NVIC_SetPriority+0x50>)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	43da      	mvns	r2, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	401a      	ands	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43d9      	mvns	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	4313      	orrs	r3, r2
         );
}
 8000322:	4618      	mov	r0, r3
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800033c:	d301      	bcc.n	8000342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033e:	2301      	movs	r3, #1
 8000340:	e00f      	b.n	8000362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <SysTick_Config+0x40>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800034a:	210f      	movs	r1, #15
 800034c:	f04f 30ff 	mov.w	r0, #4294967295
 8000350:	f7ff ff90 	bl	8000274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Config+0x40>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SysTick_Config+0x40>)
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff49 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	4603      	mov	r3, r0
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000398:	f7ff ff5e 	bl	8000258 <__NVIC_GetPriorityGrouping>
 800039c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	68b9      	ldr	r1, [r7, #8]
 80003a2:	6978      	ldr	r0, [r7, #20]
 80003a4:	f7ff ff90 	bl	80002c8 <NVIC_EncodePriority>
 80003a8:	4602      	mov	r2, r0
 80003aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff5f 	bl	8000274 <__NVIC_SetPriority>
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ffb0 	bl	800032c <SysTick_Config>
 80003cc:	4603      	mov	r3, r0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d8:	b480      	push	{r7}
 80003da:	b08b      	sub	sp, #44	; 0x2c
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003e2:	2300      	movs	r3, #0
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ea:	e169      	b.n	80006c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80003ec:	2201      	movs	r2, #1
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	69fa      	ldr	r2, [r7, #28]
 80003fc:	4013      	ands	r3, r2
 80003fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000400:	69ba      	ldr	r2, [r7, #24]
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	429a      	cmp	r2, r3
 8000406:	f040 8158 	bne.w	80006ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	4a9a      	ldr	r2, [pc, #616]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d05e      	beq.n	80004d2 <HAL_GPIO_Init+0xfa>
 8000414:	4a98      	ldr	r2, [pc, #608]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d875      	bhi.n	8000506 <HAL_GPIO_Init+0x12e>
 800041a:	4a98      	ldr	r2, [pc, #608]	; (800067c <HAL_GPIO_Init+0x2a4>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d058      	beq.n	80004d2 <HAL_GPIO_Init+0xfa>
 8000420:	4a96      	ldr	r2, [pc, #600]	; (800067c <HAL_GPIO_Init+0x2a4>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d86f      	bhi.n	8000506 <HAL_GPIO_Init+0x12e>
 8000426:	4a96      	ldr	r2, [pc, #600]	; (8000680 <HAL_GPIO_Init+0x2a8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d052      	beq.n	80004d2 <HAL_GPIO_Init+0xfa>
 800042c:	4a94      	ldr	r2, [pc, #592]	; (8000680 <HAL_GPIO_Init+0x2a8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d869      	bhi.n	8000506 <HAL_GPIO_Init+0x12e>
 8000432:	4a94      	ldr	r2, [pc, #592]	; (8000684 <HAL_GPIO_Init+0x2ac>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d04c      	beq.n	80004d2 <HAL_GPIO_Init+0xfa>
 8000438:	4a92      	ldr	r2, [pc, #584]	; (8000684 <HAL_GPIO_Init+0x2ac>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d863      	bhi.n	8000506 <HAL_GPIO_Init+0x12e>
 800043e:	4a92      	ldr	r2, [pc, #584]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d046      	beq.n	80004d2 <HAL_GPIO_Init+0xfa>
 8000444:	4a90      	ldr	r2, [pc, #576]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d85d      	bhi.n	8000506 <HAL_GPIO_Init+0x12e>
 800044a:	2b12      	cmp	r3, #18
 800044c:	d82a      	bhi.n	80004a4 <HAL_GPIO_Init+0xcc>
 800044e:	2b12      	cmp	r3, #18
 8000450:	d859      	bhi.n	8000506 <HAL_GPIO_Init+0x12e>
 8000452:	a201      	add	r2, pc, #4	; (adr r2, 8000458 <HAL_GPIO_Init+0x80>)
 8000454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000458:	080004d3 	.word	0x080004d3
 800045c:	080004ad 	.word	0x080004ad
 8000460:	080004bf 	.word	0x080004bf
 8000464:	08000501 	.word	0x08000501
 8000468:	08000507 	.word	0x08000507
 800046c:	08000507 	.word	0x08000507
 8000470:	08000507 	.word	0x08000507
 8000474:	08000507 	.word	0x08000507
 8000478:	08000507 	.word	0x08000507
 800047c:	08000507 	.word	0x08000507
 8000480:	08000507 	.word	0x08000507
 8000484:	08000507 	.word	0x08000507
 8000488:	08000507 	.word	0x08000507
 800048c:	08000507 	.word	0x08000507
 8000490:	08000507 	.word	0x08000507
 8000494:	08000507 	.word	0x08000507
 8000498:	08000507 	.word	0x08000507
 800049c:	080004b5 	.word	0x080004b5
 80004a0:	080004c9 	.word	0x080004c9
 80004a4:	4a79      	ldr	r2, [pc, #484]	; (800068c <HAL_GPIO_Init+0x2b4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d013      	beq.n	80004d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004aa:	e02c      	b.n	8000506 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	623b      	str	r3, [r7, #32]
          break;
 80004b2:	e029      	b.n	8000508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	3304      	adds	r3, #4
 80004ba:	623b      	str	r3, [r7, #32]
          break;
 80004bc:	e024      	b.n	8000508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	3308      	adds	r3, #8
 80004c4:	623b      	str	r3, [r7, #32]
          break;
 80004c6:	e01f      	b.n	8000508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	330c      	adds	r3, #12
 80004ce:	623b      	str	r3, [r7, #32]
          break;
 80004d0:	e01a      	b.n	8000508 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d102      	bne.n	80004e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004da:	2304      	movs	r3, #4
 80004dc:	623b      	str	r3, [r7, #32]
          break;
 80004de:	e013      	b.n	8000508 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d105      	bne.n	80004f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e8:	2308      	movs	r3, #8
 80004ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	69fa      	ldr	r2, [r7, #28]
 80004f0:	611a      	str	r2, [r3, #16]
          break;
 80004f2:	e009      	b.n	8000508 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f4:	2308      	movs	r3, #8
 80004f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	69fa      	ldr	r2, [r7, #28]
 80004fc:	615a      	str	r2, [r3, #20]
          break;
 80004fe:	e003      	b.n	8000508 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000500:	2300      	movs	r3, #0
 8000502:	623b      	str	r3, [r7, #32]
          break;
 8000504:	e000      	b.n	8000508 <HAL_GPIO_Init+0x130>
          break;
 8000506:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	2bff      	cmp	r3, #255	; 0xff
 800050c:	d801      	bhi.n	8000512 <HAL_GPIO_Init+0x13a>
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	e001      	b.n	8000516 <HAL_GPIO_Init+0x13e>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3304      	adds	r3, #4
 8000516:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	2bff      	cmp	r3, #255	; 0xff
 800051c:	d802      	bhi.n	8000524 <HAL_GPIO_Init+0x14c>
 800051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	e002      	b.n	800052a <HAL_GPIO_Init+0x152>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	3b08      	subs	r3, #8
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	210f      	movs	r1, #15
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	401a      	ands	r2, r3
 800053c:	6a39      	ldr	r1, [r7, #32]
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	fa01 f303 	lsl.w	r3, r1, r3
 8000544:	431a      	orrs	r2, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	2b00      	cmp	r3, #0
 8000554:	f000 80b1 	beq.w	80006ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000558:	4b4d      	ldr	r3, [pc, #308]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a4c      	ldr	r2, [pc, #304]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b4a      	ldr	r3, [pc, #296]	; (8000690 <HAL_GPIO_Init+0x2b8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000570:	4a48      	ldr	r2, [pc, #288]	; (8000694 <HAL_GPIO_Init+0x2bc>)
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	089b      	lsrs	r3, r3, #2
 8000576:	3302      	adds	r3, #2
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000580:	f003 0303 	and.w	r3, r3, #3
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	220f      	movs	r2, #15
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4013      	ands	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a40      	ldr	r2, [pc, #256]	; (8000698 <HAL_GPIO_Init+0x2c0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d013      	beq.n	80005c4 <HAL_GPIO_Init+0x1ec>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a3f      	ldr	r2, [pc, #252]	; (800069c <HAL_GPIO_Init+0x2c4>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d00d      	beq.n	80005c0 <HAL_GPIO_Init+0x1e8>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a3e      	ldr	r2, [pc, #248]	; (80006a0 <HAL_GPIO_Init+0x2c8>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d007      	beq.n	80005bc <HAL_GPIO_Init+0x1e4>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a3d      	ldr	r2, [pc, #244]	; (80006a4 <HAL_GPIO_Init+0x2cc>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d101      	bne.n	80005b8 <HAL_GPIO_Init+0x1e0>
 80005b4:	2303      	movs	r3, #3
 80005b6:	e006      	b.n	80005c6 <HAL_GPIO_Init+0x1ee>
 80005b8:	2304      	movs	r3, #4
 80005ba:	e004      	b.n	80005c6 <HAL_GPIO_Init+0x1ee>
 80005bc:	2302      	movs	r3, #2
 80005be:	e002      	b.n	80005c6 <HAL_GPIO_Init+0x1ee>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <HAL_GPIO_Init+0x1ee>
 80005c4:	2300      	movs	r3, #0
 80005c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c8:	f002 0203 	and.w	r2, r2, #3
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	4093      	lsls	r3, r2
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005d6:	492f      	ldr	r1, [pc, #188]	; (8000694 <HAL_GPIO_Init+0x2bc>)
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	089b      	lsrs	r3, r3, #2
 80005dc:	3302      	adds	r3, #2
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	492c      	ldr	r1, [pc, #176]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	600b      	str	r3, [r1, #0]
 80005fc:	e006      	b.n	800060c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	43db      	mvns	r3, r3
 8000606:	4928      	ldr	r1, [pc, #160]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000608:	4013      	ands	r3, r2
 800060a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000614:	2b00      	cmp	r3, #0
 8000616:	d006      	beq.n	8000626 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	4922      	ldr	r1, [pc, #136]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	4313      	orrs	r3, r2
 8000622:	604b      	str	r3, [r1, #4]
 8000624:	e006      	b.n	8000634 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	43db      	mvns	r3, r3
 800062e:	491e      	ldr	r1, [pc, #120]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000630:	4013      	ands	r3, r2
 8000632:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	4918      	ldr	r1, [pc, #96]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	4313      	orrs	r3, r2
 800064a:	608b      	str	r3, [r1, #8]
 800064c:	e006      	b.n	800065c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	43db      	mvns	r3, r3
 8000656:	4914      	ldr	r1, [pc, #80]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 8000658:	4013      	ands	r3, r2
 800065a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000664:	2b00      	cmp	r3, #0
 8000666:	d021      	beq.n	80006ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 800066a:	68da      	ldr	r2, [r3, #12]
 800066c:	490e      	ldr	r1, [pc, #56]	; (80006a8 <HAL_GPIO_Init+0x2d0>)
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	4313      	orrs	r3, r2
 8000672:	60cb      	str	r3, [r1, #12]
 8000674:	e021      	b.n	80006ba <HAL_GPIO_Init+0x2e2>
 8000676:	bf00      	nop
 8000678:	10320000 	.word	0x10320000
 800067c:	10310000 	.word	0x10310000
 8000680:	10220000 	.word	0x10220000
 8000684:	10210000 	.word	0x10210000
 8000688:	10120000 	.word	0x10120000
 800068c:	10110000 	.word	0x10110000
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000
 8000698:	40010800 	.word	0x40010800
 800069c:	40010c00 	.word	0x40010c00
 80006a0:	40011000 	.word	0x40011000
 80006a4:	40011400 	.word	0x40011400
 80006a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_GPIO_Init+0x304>)
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4909      	ldr	r1, [pc, #36]	; (80006dc <HAL_GPIO_Init+0x304>)
 80006b6:	4013      	ands	r3, r2
 80006b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	3301      	adds	r3, #1
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	fa22 f303 	lsr.w	r3, r2, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f47f ae8e 	bne.w	80003ec <HAL_GPIO_Init+0x14>
  }
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	372c      	adds	r7, #44	; 0x2c
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e001      	b.n	8000702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	807b      	strh	r3, [r7, #2]
 800071a:	4613      	mov	r3, r2
 800071c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800071e:	787b      	ldrb	r3, [r7, #1]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800072a:	e003      	b.n	8000734 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	041a      	lsls	r2, r3, #16
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	611a      	str	r2, [r3, #16]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e26c      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	2b00      	cmp	r3, #0
 800075c:	f000 8087 	beq.w	800086e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000760:	4b92      	ldr	r3, [pc, #584]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f003 030c 	and.w	r3, r3, #12
 8000768:	2b04      	cmp	r3, #4
 800076a:	d00c      	beq.n	8000786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800076c:	4b8f      	ldr	r3, [pc, #572]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f003 030c 	and.w	r3, r3, #12
 8000774:	2b08      	cmp	r3, #8
 8000776:	d112      	bne.n	800079e <HAL_RCC_OscConfig+0x5e>
 8000778:	4b8c      	ldr	r3, [pc, #560]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000784:	d10b      	bne.n	800079e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000786:	4b89      	ldr	r3, [pc, #548]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d06c      	beq.n	800086c <HAL_RCC_OscConfig+0x12c>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d168      	bne.n	800086c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e246      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a6:	d106      	bne.n	80007b6 <HAL_RCC_OscConfig+0x76>
 80007a8:	4b80      	ldr	r3, [pc, #512]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a7f      	ldr	r2, [pc, #508]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	e02e      	b.n	8000814 <HAL_RCC_OscConfig+0xd4>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10c      	bne.n	80007d8 <HAL_RCC_OscConfig+0x98>
 80007be:	4b7b      	ldr	r3, [pc, #492]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a7a      	ldr	r2, [pc, #488]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b78      	ldr	r3, [pc, #480]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a77      	ldr	r2, [pc, #476]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e01d      	b.n	8000814 <HAL_RCC_OscConfig+0xd4>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007e0:	d10c      	bne.n	80007fc <HAL_RCC_OscConfig+0xbc>
 80007e2:	4b72      	ldr	r3, [pc, #456]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a71      	ldr	r2, [pc, #452]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	4b6f      	ldr	r3, [pc, #444]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a6e      	ldr	r2, [pc, #440]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e00b      	b.n	8000814 <HAL_RCC_OscConfig+0xd4>
 80007fc:	4b6b      	ldr	r3, [pc, #428]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a6a      	ldr	r2, [pc, #424]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b68      	ldr	r3, [pc, #416]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a67      	ldr	r2, [pc, #412]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 800080e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d013      	beq.n	8000844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800081c:	f7ff fcee 	bl	80001fc <HAL_GetTick>
 8000820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000822:	e008      	b.n	8000836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000824:	f7ff fcea 	bl	80001fc <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	2b64      	cmp	r3, #100	; 0x64
 8000830:	d901      	bls.n	8000836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000832:	2303      	movs	r3, #3
 8000834:	e1fa      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000836:	4b5d      	ldr	r3, [pc, #372]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0f0      	beq.n	8000824 <HAL_RCC_OscConfig+0xe4>
 8000842:	e014      	b.n	800086e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000844:	f7ff fcda 	bl	80001fc <HAL_GetTick>
 8000848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800084a:	e008      	b.n	800085e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800084c:	f7ff fcd6 	bl	80001fc <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d901      	bls.n	800085e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800085a:	2303      	movs	r3, #3
 800085c:	e1e6      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800085e:	4b53      	ldr	r3, [pc, #332]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f0      	bne.n	800084c <HAL_RCC_OscConfig+0x10c>
 800086a:	e000      	b.n	800086e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800086c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	2b00      	cmp	r3, #0
 8000878:	d063      	beq.n	8000942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 030c 	and.w	r3, r3, #12
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00b      	beq.n	800089e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 030c 	and.w	r3, r3, #12
 800088e:	2b08      	cmp	r3, #8
 8000890:	d11c      	bne.n	80008cc <HAL_RCC_OscConfig+0x18c>
 8000892:	4b46      	ldr	r3, [pc, #280]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d116      	bne.n	80008cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d005      	beq.n	80008b6 <HAL_RCC_OscConfig+0x176>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d001      	beq.n	80008b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e1ba      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	4939      	ldr	r1, [pc, #228]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80008c6:	4313      	orrs	r3, r2
 80008c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ca:	e03a      	b.n	8000942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d020      	beq.n	8000916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <HAL_RCC_OscConfig+0x270>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008da:	f7ff fc8f 	bl	80001fc <HAL_GetTick>
 80008de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e0:	e008      	b.n	80008f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008e2:	f7ff fc8b 	bl	80001fc <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d901      	bls.n	80008f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80008f0:	2303      	movs	r3, #3
 80008f2:	e19b      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f0      	beq.n	80008e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	4927      	ldr	r1, [pc, #156]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000910:	4313      	orrs	r3, r2
 8000912:	600b      	str	r3, [r1, #0]
 8000914:	e015      	b.n	8000942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <HAL_RCC_OscConfig+0x270>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091c:	f7ff fc6e 	bl	80001fc <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000924:	f7ff fc6a 	bl	80001fc <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b02      	cmp	r3, #2
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e17a      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f0      	bne.n	8000924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	2b00      	cmp	r3, #0
 800094c:	d03a      	beq.n	80009c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d019      	beq.n	800098a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_RCC_OscConfig+0x274>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800095c:	f7ff fc4e 	bl	80001fc <HAL_GetTick>
 8000960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000962:	e008      	b.n	8000976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000964:	f7ff fc4a 	bl	80001fc <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	2b02      	cmp	r3, #2
 8000970:	d901      	bls.n	8000976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000972:	2303      	movs	r3, #3
 8000974:	e15a      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_RCC_OscConfig+0x26c>)
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f0      	beq.n	8000964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f000 faa6 	bl	8000ed4 <RCC_Delay>
 8000988:	e01c      	b.n	80009c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_RCC_OscConfig+0x274>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000990:	f7ff fc34 	bl	80001fc <HAL_GetTick>
 8000994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000996:	e00f      	b.n	80009b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000998:	f7ff fc30 	bl	80001fc <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d908      	bls.n	80009b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009a6:	2303      	movs	r3, #3
 80009a8:	e140      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	42420000 	.word	0x42420000
 80009b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b8:	4b9e      	ldr	r3, [pc, #632]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1e9      	bne.n	8000998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 80a6 	beq.w	8000b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d6:	4b97      	ldr	r3, [pc, #604]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10d      	bne.n	80009fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b94      	ldr	r3, [pc, #592]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a93      	ldr	r2, [pc, #588]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b91      	ldr	r3, [pc, #580]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009fa:	2301      	movs	r3, #1
 80009fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009fe:	4b8e      	ldr	r3, [pc, #568]	; (8000c38 <HAL_RCC_OscConfig+0x4f8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d118      	bne.n	8000a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a0a:	4b8b      	ldr	r3, [pc, #556]	; (8000c38 <HAL_RCC_OscConfig+0x4f8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a8a      	ldr	r2, [pc, #552]	; (8000c38 <HAL_RCC_OscConfig+0x4f8>)
 8000a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a16:	f7ff fbf1 	bl	80001fc <HAL_GetTick>
 8000a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a1c:	e008      	b.n	8000a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a1e:	f7ff fbed 	bl	80001fc <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b64      	cmp	r3, #100	; 0x64
 8000a2a:	d901      	bls.n	8000a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e0fd      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	4b81      	ldr	r3, [pc, #516]	; (8000c38 <HAL_RCC_OscConfig+0x4f8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f0      	beq.n	8000a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d106      	bne.n	8000a52 <HAL_RCC_OscConfig+0x312>
 8000a44:	4b7b      	ldr	r3, [pc, #492]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a46:	6a1b      	ldr	r3, [r3, #32]
 8000a48:	4a7a      	ldr	r2, [pc, #488]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6213      	str	r3, [r2, #32]
 8000a50:	e02d      	b.n	8000aae <HAL_RCC_OscConfig+0x36e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10c      	bne.n	8000a74 <HAL_RCC_OscConfig+0x334>
 8000a5a:	4b76      	ldr	r3, [pc, #472]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	4a75      	ldr	r2, [pc, #468]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a60:	f023 0301 	bic.w	r3, r3, #1
 8000a64:	6213      	str	r3, [r2, #32]
 8000a66:	4b73      	ldr	r3, [pc, #460]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	4a72      	ldr	r2, [pc, #456]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	f023 0304 	bic.w	r3, r3, #4
 8000a70:	6213      	str	r3, [r2, #32]
 8000a72:	e01c      	b.n	8000aae <HAL_RCC_OscConfig+0x36e>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	d10c      	bne.n	8000a96 <HAL_RCC_OscConfig+0x356>
 8000a7c:	4b6d      	ldr	r3, [pc, #436]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	4a6c      	ldr	r2, [pc, #432]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6213      	str	r3, [r2, #32]
 8000a88:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4a69      	ldr	r2, [pc, #420]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6213      	str	r3, [r2, #32]
 8000a94:	e00b      	b.n	8000aae <HAL_RCC_OscConfig+0x36e>
 8000a96:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	4a66      	ldr	r2, [pc, #408]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000a9c:	f023 0301 	bic.w	r3, r3, #1
 8000aa0:	6213      	str	r3, [r2, #32]
 8000aa2:	4b64      	ldr	r3, [pc, #400]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a63      	ldr	r2, [pc, #396]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000aa8:	f023 0304 	bic.w	r3, r3, #4
 8000aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d015      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab6:	f7ff fba1 	bl	80001fc <HAL_GetTick>
 8000aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abc:	e00a      	b.n	8000ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000abe:	f7ff fb9d 	bl	80001fc <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d901      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e0ab      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0ee      	beq.n	8000abe <HAL_RCC_OscConfig+0x37e>
 8000ae0:	e014      	b.n	8000b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fb8b 	bl	80001fc <HAL_GetTick>
 8000ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	e00a      	b.n	8000b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aea:	f7ff fb87 	bl	80001fc <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e095      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b00:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1ee      	bne.n	8000aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d105      	bne.n	8000b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b12:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a47      	ldr	r2, [pc, #284]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8081 	beq.w	8000c2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b28:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d061      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d146      	bne.n	8000bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <HAL_RCC_OscConfig+0x4fc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b42:	f7ff fb5b 	bl	80001fc <HAL_GetTick>
 8000b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b48:	e008      	b.n	8000b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fb57 	bl	80001fc <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d901      	bls.n	8000b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e067      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f0      	bne.n	8000b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b70:	d108      	bne.n	8000b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	492d      	ldr	r1, [pc, #180]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b80:	4313      	orrs	r3, r2
 8000b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a19      	ldr	r1, [r3, #32]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	430b      	orrs	r3, r1
 8000b96:	4927      	ldr	r1, [pc, #156]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_RCC_OscConfig+0x4fc>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fb2b 	bl	80001fc <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ba8:	e008      	b.n	8000bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000baa:	f7ff fb27 	bl	80001fc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e037      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f0      	beq.n	8000baa <HAL_RCC_OscConfig+0x46a>
 8000bc8:	e02f      	b.n	8000c2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_RCC_OscConfig+0x4fc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fb14 	bl	80001fc <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bd8:	f7ff fb10 	bl	80001fc <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e020      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f0      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x498>
 8000bf6:	e018      	b.n	8000c2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d101      	bne.n	8000c04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e013      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_RCC_OscConfig+0x4f4>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d106      	bne.n	8000c26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d001      	beq.n	8000c2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40007000 	.word	0x40007000
 8000c3c:	42420060 	.word	0x42420060

08000c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0d0      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c54:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d910      	bls.n	8000c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c62:	4b67      	ldr	r3, [pc, #412]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 0207 	bic.w	r2, r3, #7
 8000c6a:	4965      	ldr	r1, [pc, #404]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c72:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d001      	beq.n	8000c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e0b8      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d020      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c9c:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cb4:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	494d      	ldr	r1, [pc, #308]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d040      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d107      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d115      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e07f      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfe:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d109      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e073      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e06b      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f023 0203 	bic.w	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4936      	ldr	r1, [pc, #216]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d30:	f7ff fa64 	bl	80001fc <HAL_GetTick>
 8000d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d38:	f7ff fa60 	bl	80001fc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e053      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 020c 	and.w	r2, r3, #12
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d1eb      	bne.n	8000d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d210      	bcs.n	8000d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 0207 	bic.w	r2, r3, #7
 8000d76:	4922      	ldr	r1, [pc, #136]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_RCC_ClockConfig+0x1c0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d001      	beq.n	8000d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e032      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	4916      	ldr	r1, [pc, #88]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d009      	beq.n	8000dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	490e      	ldr	r1, [pc, #56]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dce:	f000 f821 	bl	8000e14 <HAL_RCC_GetSysClockFreq>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	490a      	ldr	r1, [pc, #40]	; (8000e08 <HAL_RCC_ClockConfig+0x1c8>)
 8000de0:	5ccb      	ldrb	r3, [r1, r3]
 8000de2:	fa22 f303 	lsr.w	r3, r2, r3
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_RCC_ClockConfig+0x1cc>)
 8000de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_RCC_ClockConfig+0x1d0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9c2 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	08001b80 	.word	0x08001b80
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000000 	.word	0x20000000

08000e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e14:	b490      	push	{r4, r7}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e1c:	1d3c      	adds	r4, r7, #4
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e24:	f240 2301 	movw	r3, #513	; 0x201
 8000e28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d002      	beq.n	8000e54 <HAL_RCC_GetSysClockFreq+0x40>
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d003      	beq.n	8000e5a <HAL_RCC_GetSysClockFreq+0x46>
 8000e52:	e02d      	b.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e56:	623b      	str	r3, [r7, #32]
      break;
 8000e58:	e02d      	b.n	8000eb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e66:	4413      	add	r3, r2
 8000e68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	0c5b      	lsrs	r3, r3, #17
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e86:	4413      	add	r3, r2
 8000e88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e92:	fb02 f203 	mul.w	r2, r2, r3
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9e:	e004      	b.n	8000eaa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea4:	fb02 f303 	mul.w	r3, r2, r3
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	623b      	str	r3, [r7, #32]
      break;
 8000eae:	e002      	b.n	8000eb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eb2:	623b      	str	r3, [r7, #32]
      break;
 8000eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc90      	pop	{r4, r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	08001b40 	.word	0x08001b40
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	007a1200 	.word	0x007a1200
 8000ed0:	003d0900 	.word	0x003d0900

08000ed4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <RCC_Delay+0x34>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <RCC_Delay+0x38>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0a5b      	lsrs	r3, r3, #9
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ef0:	bf00      	nop
  }
  while (Delay --);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	60fa      	str	r2, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f9      	bne.n	8000ef0 <RCC_Delay+0x1c>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	10624dd3 	.word	0x10624dd3

08000f10 <KEYPAD_Init>:

KEYPAD_CfgType KEYPAD_CfgParam;


void KEYPAD_Init(uint8_t* au8_KeyStates, KEYPAD_CfgType KEYPAD_CfgParam_ext)
{
 8000f10:	b084      	sub	sp, #16
 8000f12:	b4b0      	push	{r4, r5, r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	f107 001c 	add.w	r0, r7, #28
 8000f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(au8_KeyStates != NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00f      	beq.n	8000f48 <KEYPAD_Init+0x38>
	{
		gs_KEYPAD_info.KEY_States = au8_KeyStates;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <KEYPAD_Init+0x44>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
		KEYPAD_CfgParam = KEYPAD_CfgParam_ext;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <KEYPAD_Init+0x48>)
 8000f30:	461d      	mov	r5, r3
 8000f32:	f107 041c 	add.w	r4, r7, #28
 8000f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000f46:	e000      	b.n	8000f4a <KEYPAD_Init+0x3a>
	}
	else
	{
		/* Potentially Should Return An Error */
		return;
 8000f48:	bf00      	nop
	}

}
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bcb0      	pop	{r4, r5, r7}
 8000f50:	b004      	add	sp, #16
 8000f52:	4770      	bx	lr
 8000f54:	20000028 	.word	0x20000028
 8000f58:	20000044 	.word	0x20000044

08000f5c <KEYPAD_Scan>:



void KEYPAD_Scan()
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
	uint8_t au8_ReadState[ROWS] = {0};
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	e010      	b.n	8000f92 <KEYPAD_Scan+0x36>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[i], KEYPAD_CfgParam.COL_PIN[i], 1);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8000f74:	3306      	adds	r3, #6
 8000f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	4a8a      	ldr	r2, [pc, #552]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8000f7e:	3314      	adds	r3, #20
 8000f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fbc1 	bl	800070e <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d9eb      	bls.n	8000f70 <KEYPAD_Scan+0x14>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	e017      	b.n	8000fce <KEYPAD_Scan+0x72>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[i], KEYPAD_CfgParam.ROW_PIN[i]);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a81      	ldr	r2, [pc, #516]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8000fa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	497f      	ldr	r1, [pc, #508]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8000faa:	3308      	adds	r3, #8
 8000fac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb0:	79fc      	ldrb	r4, [r7, #7]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	f7ff fb93 	bl	80006e0 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4423      	add	r3, r4
 8000fc4:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d9e4      	bls.n	8000f9e <KEYPAD_Scan+0x42>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 8000fd4:	783a      	ldrb	r2, [r7, #0]
 8000fd6:	787b      	ldrb	r3, [r7, #1]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	78bb      	ldrb	r3, [r7, #2]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 83d8 	beq.w	800179e <KEYPAD_Scan+0x842>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 8000fee:	783b      	ldrb	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80dd 	beq.w	80011b0 <KEYPAD_Scan+0x254>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 1);
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a6b      	ldr	r2, [pc, #428]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8000ffc:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8000ffe:	2201      	movs	r2, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fb84 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a67      	ldr	r2, [pc, #412]	; (80011a8 <KEYPAD_Scan+0x24c>)
 800100c:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800100e:	2200      	movs	r2, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb7c 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 8001016:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a63      	ldr	r2, [pc, #396]	; (80011a8 <KEYPAD_Scan+0x24c>)
 800101c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800101e:	2200      	movs	r2, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fb74 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 8001026:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <KEYPAD_Scan+0x24c>)
 800102c:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800102e:	2200      	movs	r2, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fb6c 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[0], KEYPAD_CfgParam.ROW_PIN[0]);
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <KEYPAD_Scan+0x24c>)
 800103c:	8a12      	ldrh	r2, [r2, #16]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fb4d 	bl	80006e0 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <KEYPAD_Scan+0xfe>
			{
				gs_KEYPAD_info.KEY_States[0] = 1;
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <KEYPAD_Scan+0x250>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e003      	b.n	8001062 <KEYPAD_Scan+0x106>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[0] = 0;
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <KEYPAD_Scan+0x250>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001068:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fb4e 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 1);
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001078:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800107a:	2201      	movs	r2, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fb46 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001088:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800108a:	2200      	movs	r2, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fb3e 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	4a44      	ldr	r2, [pc, #272]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001098:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800109a:	2200      	movs	r2, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fb36 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[0], KEYPAD_CfgParam.ROW_PIN[0]);
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010a8:	8a12      	ldrh	r2, [r2, #16]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fb17 	bl	80006e0 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <KEYPAD_Scan+0x16c>
			{
				gs_KEYPAD_info.KEY_States[1] = 1;
 80010bc:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <KEYPAD_Scan+0x250>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e004      	b.n	80010d2 <KEYPAD_Scan+0x176>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[1] = 0;
 80010c8:	4b38      	ldr	r3, [pc, #224]	; (80011ac <KEYPAD_Scan+0x250>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 80010d2:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010d8:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80010da:	2200      	movs	r2, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fb16 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010e8:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80010ea:	2200      	movs	r2, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb0e 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 1);
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <KEYPAD_Scan+0x24c>)
 80010f8:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80010fa:	2201      	movs	r2, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb06 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001108:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800110a:	2200      	movs	r2, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fafe 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[0], KEYPAD_CfgParam.ROW_PIN[0]);
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001118:	8a12      	ldrh	r2, [r2, #16]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fadf 	bl	80006e0 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <KEYPAD_Scan+0x1dc>
			{
				gs_KEYPAD_info.KEY_States[2] = 1;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <KEYPAD_Scan+0x250>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3302      	adds	r3, #2
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e004      	b.n	8001142 <KEYPAD_Scan+0x1e6>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[2] = 0;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <KEYPAD_Scan+0x250>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3302      	adds	r3, #2
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001148:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800114a:	2200      	movs	r2, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fade 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001158:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800115a:	2200      	movs	r2, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fad6 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001168:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800116a:	2200      	movs	r2, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff face 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 1);
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001178:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800117a:	2201      	movs	r2, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fac6 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[0], KEYPAD_CfgParam.ROW_PIN[0]);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <KEYPAD_Scan+0x24c>)
 8001188:	8a12      	ldrh	r2, [r2, #16]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff faa7 	bl	80006e0 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01c      	beq.n	80011d6 <KEYPAD_Scan+0x27a>
			{
				gs_KEYPAD_info.KEY_States[3] = 1;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <KEYPAD_Scan+0x250>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3303      	adds	r3, #3
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e016      	b.n	80011d6 <KEYPAD_Scan+0x27a>
 80011a8:	20000044 	.word	0x20000044
 80011ac:	20000028 	.word	0x20000028
			}
		}
		else
		{
			gs_KEYPAD_info.KEY_States[0] = 0;
 80011b0:	4b9e      	ldr	r3, [pc, #632]	; (800142c <KEYPAD_Scan+0x4d0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[1] = 0;
 80011b8:	4b9c      	ldr	r3, [pc, #624]	; (800142c <KEYPAD_Scan+0x4d0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[2] = 0;
 80011c2:	4b9a      	ldr	r3, [pc, #616]	; (800142c <KEYPAD_Scan+0x4d0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3302      	adds	r3, #2
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[3] = 0;
 80011cc:	4b97      	ldr	r3, [pc, #604]	; (800142c <KEYPAD_Scan+0x4d0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3303      	adds	r3, #3
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 80011d6:	787b      	ldrb	r3, [r7, #1]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80db 	beq.w	8001394 <KEYPAD_Scan+0x438>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 1);
 80011de:	4b94      	ldr	r3, [pc, #592]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a93      	ldr	r2, [pc, #588]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80011e4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80011e6:	2201      	movs	r2, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fa90 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80011ee:	4b90      	ldr	r3, [pc, #576]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a8f      	ldr	r2, [pc, #572]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80011f4:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80011f6:	2200      	movs	r2, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa88 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 80011fe:	4b8c      	ldr	r3, [pc, #560]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a8b      	ldr	r2, [pc, #556]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001204:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001206:	2200      	movs	r2, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fa80 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4a87      	ldr	r2, [pc, #540]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001214:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001216:	2200      	movs	r2, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fa78 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[1], KEYPAD_CfgParam.ROW_PIN[1]);
 800121e:	4b84      	ldr	r3, [pc, #528]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a83      	ldr	r2, [pc, #524]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001224:	8a52      	ldrh	r2, [r2, #18]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fa59 	bl	80006e0 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <KEYPAD_Scan+0x2e8>
			{
				gs_KEYPAD_info.KEY_States[4] = 1;
 8001238:	4b7c      	ldr	r3, [pc, #496]	; (800142c <KEYPAD_Scan+0x4d0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3304      	adds	r3, #4
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e004      	b.n	800124e <KEYPAD_Scan+0x2f2>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[4] = 0;
 8001244:	4b79      	ldr	r3, [pc, #484]	; (800142c <KEYPAD_Scan+0x4d0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3304      	adds	r3, #4
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a77      	ldr	r2, [pc, #476]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001254:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8001256:	2200      	movs	r2, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fa58 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 1);
 800125e:	4b74      	ldr	r3, [pc, #464]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a73      	ldr	r2, [pc, #460]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001264:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8001266:	2201      	movs	r2, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fa50 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001274:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001276:	2200      	movs	r2, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fa48 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 800127e:	4b6c      	ldr	r3, [pc, #432]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	4a6b      	ldr	r2, [pc, #428]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001284:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001286:	2200      	movs	r2, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa40 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[1], KEYPAD_CfgParam.ROW_PIN[1]);
 800128e:	4b68      	ldr	r3, [pc, #416]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a67      	ldr	r2, [pc, #412]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001294:	8a52      	ldrh	r2, [r2, #18]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fa21 	bl	80006e0 <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <KEYPAD_Scan+0x358>
			{
				gs_KEYPAD_info.KEY_States[5] = 1;
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <KEYPAD_Scan+0x4d0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3305      	adds	r3, #5
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e004      	b.n	80012be <KEYPAD_Scan+0x362>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[5] = 0;
 80012b4:	4b5d      	ldr	r3, [pc, #372]	; (800142c <KEYPAD_Scan+0x4d0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3305      	adds	r3, #5
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 80012be:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a5b      	ldr	r2, [pc, #364]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012c4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fa20 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a57      	ldr	r2, [pc, #348]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012d4:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80012d6:	2200      	movs	r2, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fa18 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 1);
 80012de:	4b54      	ldr	r3, [pc, #336]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a53      	ldr	r2, [pc, #332]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012e4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80012e6:	2201      	movs	r2, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fa10 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 80012ee:	4b50      	ldr	r3, [pc, #320]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	4a4f      	ldr	r2, [pc, #316]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80012f4:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80012f6:	2200      	movs	r2, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fa08 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[1], KEYPAD_CfgParam.ROW_PIN[1]);
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001304:	8a52      	ldrh	r2, [r2, #18]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f9e9 	bl	80006e0 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <KEYPAD_Scan+0x3c8>
			{
				gs_KEYPAD_info.KEY_States[6] = 1;
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <KEYPAD_Scan+0x4d0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3306      	adds	r3, #6
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e004      	b.n	800132e <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[6] = 0;
 8001324:	4b41      	ldr	r3, [pc, #260]	; (800142c <KEYPAD_Scan+0x4d0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3306      	adds	r3, #6
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 800132e:	4b40      	ldr	r3, [pc, #256]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001334:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8001336:	2200      	movs	r2, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f9e8 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 800133e:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a3b      	ldr	r2, [pc, #236]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001344:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8001346:	2200      	movs	r2, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f9e0 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a37      	ldr	r2, [pc, #220]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001354:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001356:	2200      	movs	r2, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f9d8 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 1);
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	4a33      	ldr	r2, [pc, #204]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001364:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001366:	2201      	movs	r2, #1
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f9d0 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[1], KEYPAD_CfgParam.ROW_PIN[1]);
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001374:	8a52      	ldrh	r2, [r2, #18]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f9b1 	bl	80006e0 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d019      	beq.n	80013bc <KEYPAD_Scan+0x460>
			{
				gs_KEYPAD_info.KEY_States[7] = 1;
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <KEYPAD_Scan+0x4d0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3307      	adds	r3, #7
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e013      	b.n	80013bc <KEYPAD_Scan+0x460>
			}
		}
		else
		{
			gs_KEYPAD_info.KEY_States[4] = 0;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <KEYPAD_Scan+0x4d0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3304      	adds	r3, #4
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[5] = 0;
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <KEYPAD_Scan+0x4d0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3305      	adds	r3, #5
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[6] = 0;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <KEYPAD_Scan+0x4d0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3306      	adds	r3, #6
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[7] = 0;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <KEYPAD_Scan+0x4d0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3307      	adds	r3, #7
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 80013bc:	78bb      	ldrb	r3, [r7, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80e0 	beq.w	8001584 <KEYPAD_Scan+0x628>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 1);
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013ca:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80013cc:	2201      	movs	r2, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f99d 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	4a15      	ldr	r2, [pc, #84]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013da:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80013dc:	2200      	movs	r2, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f995 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013ea:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80013ec:	2200      	movs	r2, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f98d 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <KEYPAD_Scan+0x4d4>)
 80013fa:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80013fc:	2200      	movs	r2, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f985 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[2], KEYPAD_CfgParam.ROW_PIN[2]);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <KEYPAD_Scan+0x4d4>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <KEYPAD_Scan+0x4d4>)
 800140a:	8a92      	ldrh	r2, [r2, #20]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f966 	bl	80006e0 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00a      	beq.n	8001434 <KEYPAD_Scan+0x4d8>
			{
				gs_KEYPAD_info.KEY_States[8] = 1;
 800141e:	4b03      	ldr	r3, [pc, #12]	; (800142c <KEYPAD_Scan+0x4d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3308      	adds	r3, #8
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e009      	b.n	800143e <KEYPAD_Scan+0x4e2>
 800142a:	bf00      	nop
 800142c:	20000028 	.word	0x20000028
 8001430:	20000044 	.word	0x20000044
			}
			else
			{
				gs_KEYPAD_info.KEY_States[8] = 0;
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <KEYPAD_Scan+0x730>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3308      	adds	r3, #8
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 800143e:	4b94      	ldr	r3, [pc, #592]	; (8001690 <KEYPAD_Scan+0x734>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a93      	ldr	r2, [pc, #588]	; (8001690 <KEYPAD_Scan+0x734>)
 8001444:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8001446:	2200      	movs	r2, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f960 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 1);
 800144e:	4b90      	ldr	r3, [pc, #576]	; (8001690 <KEYPAD_Scan+0x734>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a8f      	ldr	r2, [pc, #572]	; (8001690 <KEYPAD_Scan+0x734>)
 8001454:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8001456:	2201      	movs	r2, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f958 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 800145e:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <KEYPAD_Scan+0x734>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a8b      	ldr	r2, [pc, #556]	; (8001690 <KEYPAD_Scan+0x734>)
 8001464:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001466:	2200      	movs	r2, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f950 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <KEYPAD_Scan+0x734>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	4a87      	ldr	r2, [pc, #540]	; (8001690 <KEYPAD_Scan+0x734>)
 8001474:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001476:	2200      	movs	r2, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f948 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[2], KEYPAD_CfgParam.ROW_PIN[2]);
 800147e:	4b84      	ldr	r3, [pc, #528]	; (8001690 <KEYPAD_Scan+0x734>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a83      	ldr	r2, [pc, #524]	; (8001690 <KEYPAD_Scan+0x734>)
 8001484:	8a92      	ldrh	r2, [r2, #20]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f929 	bl	80006e0 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <KEYPAD_Scan+0x548>
			{
				gs_KEYPAD_info.KEY_States[9] = 1;
 8001498:	4b7c      	ldr	r3, [pc, #496]	; (800168c <KEYPAD_Scan+0x730>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3309      	adds	r3, #9
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e004      	b.n	80014ae <KEYPAD_Scan+0x552>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[9] = 0;
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <KEYPAD_Scan+0x730>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3309      	adds	r3, #9
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 80014ae:	4b78      	ldr	r3, [pc, #480]	; (8001690 <KEYPAD_Scan+0x734>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a77      	ldr	r2, [pc, #476]	; (8001690 <KEYPAD_Scan+0x734>)
 80014b4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80014b6:	2200      	movs	r2, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f928 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80014be:	4b74      	ldr	r3, [pc, #464]	; (8001690 <KEYPAD_Scan+0x734>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a73      	ldr	r2, [pc, #460]	; (8001690 <KEYPAD_Scan+0x734>)
 80014c4:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80014c6:	2200      	movs	r2, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f920 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 1);
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <KEYPAD_Scan+0x734>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a6f      	ldr	r2, [pc, #444]	; (8001690 <KEYPAD_Scan+0x734>)
 80014d4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80014d6:	2201      	movs	r2, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f918 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 80014de:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <KEYPAD_Scan+0x734>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	4a6b      	ldr	r2, [pc, #428]	; (8001690 <KEYPAD_Scan+0x734>)
 80014e4:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80014e6:	2200      	movs	r2, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f910 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[2], KEYPAD_CfgParam.ROW_PIN[2]);
 80014ee:	4b68      	ldr	r3, [pc, #416]	; (8001690 <KEYPAD_Scan+0x734>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4a67      	ldr	r2, [pc, #412]	; (8001690 <KEYPAD_Scan+0x734>)
 80014f4:	8a92      	ldrh	r2, [r2, #20]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f8f1 	bl	80006e0 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <KEYPAD_Scan+0x5b8>
			{
				gs_KEYPAD_info.KEY_States[10] = 1;
 8001508:	4b60      	ldr	r3, [pc, #384]	; (800168c <KEYPAD_Scan+0x730>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	330a      	adds	r3, #10
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e004      	b.n	800151e <KEYPAD_Scan+0x5c2>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[10] = 0;
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <KEYPAD_Scan+0x730>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	330a      	adds	r3, #10
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <KEYPAD_Scan+0x734>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <KEYPAD_Scan+0x734>)
 8001524:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f8f0 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <KEYPAD_Scan+0x734>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <KEYPAD_Scan+0x734>)
 8001534:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8001536:	2200      	movs	r2, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f8e8 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 800153e:	4b54      	ldr	r3, [pc, #336]	; (8001690 <KEYPAD_Scan+0x734>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a53      	ldr	r2, [pc, #332]	; (8001690 <KEYPAD_Scan+0x734>)
 8001544:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001546:	2200      	movs	r2, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f8e0 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 1);
 800154e:	4b50      	ldr	r3, [pc, #320]	; (8001690 <KEYPAD_Scan+0x734>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	4a4f      	ldr	r2, [pc, #316]	; (8001690 <KEYPAD_Scan+0x734>)
 8001554:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001556:	2201      	movs	r2, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f8d8 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[2], KEYPAD_CfgParam.ROW_PIN[2]);
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <KEYPAD_Scan+0x734>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <KEYPAD_Scan+0x734>)
 8001564:	8a92      	ldrh	r2, [r2, #20]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f8b9 	bl	80006e0 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d019      	beq.n	80015ac <KEYPAD_Scan+0x650>
			{
				gs_KEYPAD_info.KEY_States[11] = 1;
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <KEYPAD_Scan+0x730>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	330b      	adds	r3, #11
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e013      	b.n	80015ac <KEYPAD_Scan+0x650>
			}
		}
		else
		{
			gs_KEYPAD_info.KEY_States[8] = 0;
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <KEYPAD_Scan+0x730>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3308      	adds	r3, #8
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[9] = 0;
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <KEYPAD_Scan+0x730>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3309      	adds	r3, #9
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[10] = 0;
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <KEYPAD_Scan+0x730>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	330a      	adds	r3, #10
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[11] = 0;
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <KEYPAD_Scan+0x730>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	330b      	adds	r3, #11
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80e0 	beq.w	8001774 <KEYPAD_Scan+0x818>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 1);
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <KEYPAD_Scan+0x734>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a35      	ldr	r2, [pc, #212]	; (8001690 <KEYPAD_Scan+0x734>)
 80015ba:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80015bc:	2201      	movs	r2, #1
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f8a5 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <KEYPAD_Scan+0x734>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	4a31      	ldr	r2, [pc, #196]	; (8001690 <KEYPAD_Scan+0x734>)
 80015ca:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80015cc:	2200      	movs	r2, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f89d 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <KEYPAD_Scan+0x734>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <KEYPAD_Scan+0x734>)
 80015da:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80015dc:	2200      	movs	r2, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff f895 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <KEYPAD_Scan+0x734>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	4a29      	ldr	r2, [pc, #164]	; (8001690 <KEYPAD_Scan+0x734>)
 80015ea:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80015ec:	2200      	movs	r2, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f88d 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[3], KEYPAD_CfgParam.ROW_PIN[3]);
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <KEYPAD_Scan+0x734>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <KEYPAD_Scan+0x734>)
 80015fa:	8ad2      	ldrh	r2, [r2, #22]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f86e 	bl	80006e0 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <KEYPAD_Scan+0x6be>
			{
				gs_KEYPAD_info.KEY_States[12] = 1;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <KEYPAD_Scan+0x730>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	330c      	adds	r3, #12
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e004      	b.n	8001624 <KEYPAD_Scan+0x6c8>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[12] = 0;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <KEYPAD_Scan+0x730>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	330c      	adds	r3, #12
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <KEYPAD_Scan+0x734>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <KEYPAD_Scan+0x734>)
 800162a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 800162c:	2200      	movs	r2, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f86d 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 1);
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <KEYPAD_Scan+0x734>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <KEYPAD_Scan+0x734>)
 800163a:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 800163c:	2201      	movs	r2, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f865 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <KEYPAD_Scan+0x734>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <KEYPAD_Scan+0x734>)
 800164a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800164c:	2200      	movs	r2, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f85d 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <KEYPAD_Scan+0x734>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <KEYPAD_Scan+0x734>)
 800165a:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 800165c:	2200      	movs	r2, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f855 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[3], KEYPAD_CfgParam.ROW_PIN[3]);
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <KEYPAD_Scan+0x734>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <KEYPAD_Scan+0x734>)
 800166a:	8ad2      	ldrh	r2, [r2, #22]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f836 	bl	80006e0 <HAL_GPIO_ReadPin>
 8001674:	4603      	mov	r3, r0
 8001676:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <KEYPAD_Scan+0x738>
			{
				gs_KEYPAD_info.KEY_States[13] = 1;
 800167e:	4b03      	ldr	r3, [pc, #12]	; (800168c <KEYPAD_Scan+0x730>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	330d      	adds	r3, #13
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e009      	b.n	800169e <KEYPAD_Scan+0x742>
 800168a:	bf00      	nop
 800168c:	20000028 	.word	0x20000028
 8001690:	20000044 	.word	0x20000044
			}
			else
			{
				gs_KEYPAD_info.KEY_States[13] = 0;
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <KEYPAD_Scan+0x898>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	330d      	adds	r3, #13
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 800169e:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016a4:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80016a6:	2200      	movs	r2, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f830 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 80016ae:	4b52      	ldr	r3, [pc, #328]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016b4:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80016b6:	2200      	movs	r2, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f828 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 1);
 80016be:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016c4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80016c6:	2201      	movs	r2, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f820 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 0);
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016d4:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 80016d6:	2200      	movs	r2, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f818 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[3], KEYPAD_CfgParam.ROW_PIN[3]);
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	4a45      	ldr	r2, [pc, #276]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80016e4:	8ad2      	ldrh	r2, [r2, #22]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fff9 	bl	80006e0 <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <KEYPAD_Scan+0x7a8>
			{
				gs_KEYPAD_info.KEY_States[14] = 1;
 80016f8:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <KEYPAD_Scan+0x898>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	330e      	adds	r3, #14
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e004      	b.n	800170e <KEYPAD_Scan+0x7b2>
			}
			else
			{
				gs_KEYPAD_info.KEY_States[14] = 0;
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <KEYPAD_Scan+0x898>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	330e      	adds	r3, #14
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[0], KEYPAD_CfgParam.COL_PIN[0], 0);
 800170e:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a39      	ldr	r2, [pc, #228]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001714:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fff8 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[1], KEYPAD_CfgParam.COL_PIN[1], 0);
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001724:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8001726:	2200      	movs	r2, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fff0 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[2], KEYPAD_CfgParam.COL_PIN[2], 0);
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a31      	ldr	r2, [pc, #196]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001734:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8001736:	2200      	movs	r2, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ffe8 	bl	800070e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[3], KEYPAD_CfgParam.COL_PIN[3], 1);
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001744:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001746:	2201      	movs	r2, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ffe0 	bl	800070e <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam.ROW_GPIO[3], KEYPAD_CfgParam.ROW_PIN[3]);
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4a29      	ldr	r2, [pc, #164]	; (80017f8 <KEYPAD_Scan+0x89c>)
 8001754:	8ad2      	ldrh	r2, [r2, #22]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ffc1 	bl	80006e0 <HAL_GPIO_ReadPin>
 800175e:	4603      	mov	r3, r0
 8001760:	71bb      	strb	r3, [r7, #6]
			if(au8_ReadSt)
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d029      	beq.n	80017bc <KEYPAD_Scan+0x860>
			{
				gs_KEYPAD_info.KEY_States[15] = 1;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <KEYPAD_Scan+0x898>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	330f      	adds	r3, #15
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e023      	b.n	80017bc <KEYPAD_Scan+0x860>
			}
		}
		else
		{
			gs_KEYPAD_info.KEY_States[12] = 0;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <KEYPAD_Scan+0x898>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	330c      	adds	r3, #12
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[13] = 0;
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <KEYPAD_Scan+0x898>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	330d      	adds	r3, #13
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[14] = 0;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <KEYPAD_Scan+0x898>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	330e      	adds	r3, #14
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info.KEY_States[15] = 0;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <KEYPAD_Scan+0x898>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	330f      	adds	r3, #15
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e00e      	b.n	80017bc <KEYPAD_Scan+0x860>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	e008      	b.n	80017b6 <KEYPAD_Scan+0x85a>
		{
			gs_KEYPAD_info.KEY_States[i] = 0;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <KEYPAD_Scan+0x898>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4413      	add	r3, r2
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	3301      	adds	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d9f3      	bls.n	80017a4 <KEYPAD_Scan+0x848>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	e010      	b.n	80017e4 <KEYPAD_Scan+0x888>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam.COL_GPIO[i], KEYPAD_CfgParam.COL_PIN[i], 1);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80017c6:	3306      	adds	r3, #6
 80017c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <KEYPAD_Scan+0x89c>)
 80017d0:	3314      	adds	r3, #20
 80017d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	f7fe ff98 	bl	800070e <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3301      	adds	r3, #1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d9eb      	bls.n	80017c2 <KEYPAD_Scan+0x866>
	}
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	20000028 	.word	0x20000028
 80017f8:	20000044 	.word	0x20000044

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f7fe fca3 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001806:	f000 f829 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180a:	f000 f863 	bl	80018d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  KEYPAD_Init(KeyStatesArr, KEYPAD_CfgParam_ext );
 800180e:	4e10      	ldr	r6, [pc, #64]	; (8001850 <main+0x54>)
 8001810:	466d      	mov	r5, sp
 8001812:	f106 040c 	add.w	r4, r6, #12
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <main+0x58>)
 8001828:	f7ff fb72 	bl	8000f10 <KEYPAD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(KeyStatesArr[KEY_1] == KEY_PRESSED)
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <main+0x58>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <main+0x46>
	  {
	             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <main+0x5c>)
 800183c:	f7fe ff67 	bl	800070e <HAL_GPIO_WritePin>
 8001840:	e7f4      	b.n	800182c <main+0x30>
	         }
	  else
	         {
	        	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <main+0x5c>)
 800184a:	f7fe ff60 	bl	800070e <HAL_GPIO_WritePin>
	  if(KeyStatesArr[KEY_1] == KEY_PRESSED)
 800184e:	e7ed      	b.n	800182c <main+0x30>
 8001850:	08001b50 	.word	0x08001b50
 8001854:	2000002c 	.word	0x2000002c
 8001858:	40010800 	.word	0x40010800

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b090      	sub	sp, #64	; 0x40
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0318 	add.w	r3, r7, #24
 8001866:	2228      	movs	r2, #40	; 0x28
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f954 	bl	8001b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001882:	2301      	movs	r3, #1
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001886:	2310      	movs	r3, #16
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188e:	f107 0318 	add.w	r3, r7, #24
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ff54 	bl	8000740 <HAL_RCC_OscConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800189e:	f000 f889 	bl	80019b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a2:	230f      	movs	r3, #15
 80018a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f9c0 	bl	8000c40 <HAL_RCC_ClockConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018c6:	f000 f875 	bl	80019b4 <Error_Handler>
  }
}
 80018ca:	bf00      	nop
 80018cc:	3740      	adds	r7, #64	; 0x40
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <MX_GPIO_Init+0xac>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a24      	ldr	r2, [pc, #144]	; (8001980 <MX_GPIO_Init+0xac>)
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <MX_GPIO_Init+0xac>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0320 	and.w	r3, r3, #32
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <MX_GPIO_Init+0xac>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <MX_GPIO_Init+0xac>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_GPIO_Init+0xac>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800191e:	4819      	ldr	r0, [pc, #100]	; (8001984 <MX_GPIO_Init+0xb0>)
 8001920:	f7fe fef5 	bl	800070e <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001924:	230f      	movs	r3, #15
 8001926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800192c:	2302      	movs	r3, #2
 800192e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4619      	mov	r1, r3
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <MX_GPIO_Init+0xb0>)
 8001938:	f7fe fd4e 	bl	80003d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800193c:	23f0      	movs	r3, #240	; 0xf0
 800193e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001948:	2301      	movs	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	4619      	mov	r1, r3
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <MX_GPIO_Init+0xb0>)
 8001954:	f7fe fd40 	bl	80003d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2302      	movs	r3, #2
 8001968:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4619      	mov	r1, r3
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_GPIO_Init+0xb0>)
 8001972:	f7fe fd31 	bl	80003d8 <HAL_GPIO_Init>

}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	40010800 	.word	0x40010800

08001988 <SysTick_CallBack>:

/* USER CODE BEGIN 4 */
void SysTick_CallBack(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    SysTicks++;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SysTick_CallBack+0x28>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <SysTick_CallBack+0x28>)
 8001996:	701a      	strb	r2, [r3, #0]

    if(SysTicks == 5) // Each 5msec
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_CallBack+0x28>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d104      	bne.n	80019aa <SysTick_CallBack+0x22>
    {
    KEYPAD_Scan();
 80019a0:	f7ff fadc 	bl	8000f5c <KEYPAD_Scan>
    SysTicks = 0;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <SysTick_CallBack+0x28>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

    }
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000003c 	.word	0x2000003c

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_MspInit+0x5c>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_MspInit+0x5c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_MspInit+0x5c>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x5c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x5c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x5c>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_MspInit+0x60>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_MspInit+0x60>)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6a:	f7fe fbb5 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 8001a6e:	f7ff ff8b 	bl	8001988 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aaa:	f7ff ffe4 	bl	8001a76 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aae:	f000 f80f 	bl	8001ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab2:	f7ff fea3 	bl	80017fc <main>
  bx lr
 8001ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ac0:	08001b98 	.word	0x08001b98
  ldr r2, =_sbss
 8001ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ac8:	20000074 	.word	0x20000074

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <__libc_init_array>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	4d0c      	ldr	r5, [pc, #48]	; (8001b08 <__libc_init_array+0x38>)
 8001ad6:	4c0d      	ldr	r4, [pc, #52]	; (8001b0c <__libc_init_array+0x3c>)
 8001ad8:	1b64      	subs	r4, r4, r5
 8001ada:	10a4      	asrs	r4, r4, #2
 8001adc:	42a6      	cmp	r6, r4
 8001ade:	d109      	bne.n	8001af4 <__libc_init_array+0x24>
 8001ae0:	f000 f822 	bl	8001b28 <_init>
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	4d0a      	ldr	r5, [pc, #40]	; (8001b10 <__libc_init_array+0x40>)
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	; (8001b14 <__libc_init_array+0x44>)
 8001aea:	1b64      	subs	r4, r4, r5
 8001aec:	10a4      	asrs	r4, r4, #2
 8001aee:	42a6      	cmp	r6, r4
 8001af0:	d105      	bne.n	8001afe <__libc_init_array+0x2e>
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af8:	4798      	blx	r3
 8001afa:	3601      	adds	r6, #1
 8001afc:	e7ee      	b.n	8001adc <__libc_init_array+0xc>
 8001afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b02:	4798      	blx	r3
 8001b04:	3601      	adds	r6, #1
 8001b06:	e7f2      	b.n	8001aee <__libc_init_array+0x1e>
 8001b08:	08001b90 	.word	0x08001b90
 8001b0c:	08001b90 	.word	0x08001b90
 8001b10:	08001b90 	.word	0x08001b90
 8001b14:	08001b94 	.word	0x08001b94

08001b18 <memset>:
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4402      	add	r2, r0
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <memset+0xa>
 8001b20:	4770      	bx	lr
 8001b22:	f803 1b01 	strb.w	r1, [r3], #1
 8001b26:	e7f9      	b.n	8001b1c <memset+0x4>

08001b28 <_init>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	bf00      	nop
 8001b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2e:	bc08      	pop	{r3}
 8001b30:	469e      	mov	lr, r3
 8001b32:	4770      	bx	lr

08001b34 <_fini>:
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b36:	bf00      	nop
 8001b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b3a:	bc08      	pop	{r3}
 8001b3c:	469e      	mov	lr, r3
 8001b3e:	4770      	bx	lr
