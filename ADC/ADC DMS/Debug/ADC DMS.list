
ADC DMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003118  08003118  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003118  08003118  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003118  08003118  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  0800312c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800312c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa4f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0c  00000000  00000000  0002aa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017365  00000000  00000000  0002dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c80a  00000000  00000000  000450fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008935d  00000000  00000000  00051907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dac64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f28  00000000  00000000  000dacb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c8 	.word	0x080030c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030c8 	.word	0x080030c8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fdb5 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fe3e 	bl	8002de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fdcd 	bl	8000d36 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fd95 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d101      	bne.n	800027a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
 8000278:	e0be      	b.n	80003f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000284:	2b00      	cmp	r3, #0
 8000286:	d109      	bne.n	800029c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 fdd8 	bl	8002e4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 faf5 	bl	800088c <ADC_ConversionStop_Disable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8099 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f040 8095 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	f043 0202 	orr.w	r2, r3, #2
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	7b1b      	ldrb	r3, [r3, #12]
 80002de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f0:	d003      	beq.n	80002fa <HAL_ADC_Init+0xa2>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d102      	bne.n	8000300 <HAL_ADC_Init+0xa8>
 80002fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fe:	e000      	b.n	8000302 <HAL_ADC_Init+0xaa>
 8000300:	2300      	movs	r3, #0
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	4313      	orrs	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7d1b      	ldrb	r3, [r3, #20]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d119      	bne.n	8000344 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7b1b      	ldrb	r3, [r3, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	3b01      	subs	r3, #1
 800031e:	035a      	lsls	r2, r3, #13
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	4313      	orrs	r3, r2
 8000324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000328:	613b      	str	r3, [r7, #16]
 800032a:	e00b      	b.n	8000344 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000330:	f043 0220 	orr.w	r2, r3, #32
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	f043 0201 	orr.w	r2, r3, #1
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	430a      	orrs	r2, r1
 8000356:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <HAL_ADC_Init+0x1a8>)
 8000360:	4013      	ands	r3, r2
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	68b9      	ldr	r1, [r7, #8]
 8000368:	430b      	orrs	r3, r1
 800036a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000374:	d003      	beq.n	800037e <HAL_ADC_Init+0x126>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d104      	bne.n	8000388 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	3b01      	subs	r3, #1
 8000384:	051b      	lsls	r3, r3, #20
 8000386:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	430a      	orrs	r2, r1
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <HAL_ADC_Init+0x1ac>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d10b      	bne.n	80003c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	f023 0303 	bic.w	r3, r3, #3
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003c2:	e018      	b.n	80003f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	f023 0312 	bic.w	r3, r3, #18
 80003cc:	f043 0210 	orr.w	r2, r3, #16
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d8:	f043 0201 	orr.w	r2, r3, #1
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003e0:	2301      	movs	r3, #1
 80003e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e4:	e007      	b.n	80003f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ea:	f043 0210 	orr.w	r2, r3, #16
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	ffe1f7fd 	.word	0xffe1f7fd
 8000404:	ff1f0efe 	.word	0xff1f0efe

08000408 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000414:	2300      	movs	r3, #0
 8000416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a64      	ldr	r2, [pc, #400]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d004      	beq.n	800042c <HAL_ADC_Start_DMA+0x24>
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a63      	ldr	r2, [pc, #396]	; (80005b4 <HAL_ADC_Start_DMA+0x1ac>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <HAL_ADC_Start_DMA+0x32>
 800042c:	4b60      	ldr	r3, [pc, #384]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000434:	2b00      	cmp	r3, #0
 8000436:	f040 80b3 	bne.w	80005a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000440:	2b01      	cmp	r3, #1
 8000442:	d101      	bne.n	8000448 <HAL_ADC_Start_DMA+0x40>
 8000444:	2302      	movs	r3, #2
 8000446:	e0ae      	b.n	80005a6 <HAL_ADC_Start_DMA+0x19e>
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2201      	movs	r2, #1
 800044c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000450:	68f8      	ldr	r0, [r7, #12]
 8000452:	f000 f9c1 	bl	80007d8 <ADC_Enable>
 8000456:	4603      	mov	r3, r0
 8000458:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800045a:	7dfb      	ldrb	r3, [r7, #23]
 800045c:	2b00      	cmp	r3, #0
 800045e:	f040 809a 	bne.w	8000596 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a4e      	ldr	r2, [pc, #312]	; (80005b4 <HAL_ADC_Start_DMA+0x1ac>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d105      	bne.n	800048c <HAL_ADC_Start_DMA+0x84>
 8000480:	4b4b      	ldr	r3, [pc, #300]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d115      	bne.n	80004b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000490:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d026      	beq.n	80004f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004b6:	e01d      	b.n	80004f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a39      	ldr	r2, [pc, #228]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d004      	beq.n	80004d8 <HAL_ADC_Start_DMA+0xd0>
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <HAL_ADC_Start_DMA+0x1ac>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d10d      	bne.n	80004f4 <HAL_ADC_Start_DMA+0xec>
 80004d8:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <HAL_ADC_Start_DMA+0x1a8>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d007      	beq.n	80004f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d006      	beq.n	800050e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000504:	f023 0206 	bic.w	r2, r3, #6
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
 800050c:	e002      	b.n	8000514 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	4a25      	ldr	r2, [pc, #148]	; (80005b8 <HAL_ADC_Start_DMA+0x1b0>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	4a24      	ldr	r2, [pc, #144]	; (80005bc <HAL_ADC_Start_DMA+0x1b4>)
 800052a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <HAL_ADC_Start_DMA+0x1b8>)
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f06f 0202 	mvn.w	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6a18      	ldr	r0, [r3, #32]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	334c      	adds	r3, #76	; 0x4c
 8000558:	4619      	mov	r1, r3
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f000 fc51 	bl	8000e04 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800056c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000570:	d108      	bne.n	8000584 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000580:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000582:	e00f      	b.n	80005a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000592:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000594:	e006      	b.n	80005a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800059e:	e001      	b.n	80005a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40012400 	.word	0x40012400
 80005b4:	40012800 	.word	0x40012800
 80005b8:	0800090f 	.word	0x0800090f
 80005bc:	0800098b 	.word	0x0800098b
 80005c0:	080009a7 	.word	0x080009a7

080005c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <HAL_ADC_ConfigChannel+0x20>
 8000604:	2302      	movs	r3, #2
 8000606:	e0dc      	b.n	80007c2 <HAL_ADC_ConfigChannel+0x1da>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	2b06      	cmp	r3, #6
 8000616:	d81c      	bhi.n	8000652 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	4613      	mov	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	3b05      	subs	r3, #5
 800062a:	221f      	movs	r2, #31
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4019      	ands	r1, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	3b05      	subs	r3, #5
 8000644:	fa00 f203 	lsl.w	r2, r0, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	430a      	orrs	r2, r1
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
 8000650:	e03c      	b.n	80006cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	2b0c      	cmp	r3, #12
 8000658:	d81c      	bhi.n	8000694 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	3b23      	subs	r3, #35	; 0x23
 800066c:	221f      	movs	r2, #31
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	4019      	ands	r1, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4413      	add	r3, r2
 8000684:	3b23      	subs	r3, #35	; 0x23
 8000686:	fa00 f203 	lsl.w	r2, r0, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	430a      	orrs	r2, r1
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
 8000692:	e01b      	b.n	80006cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	3b41      	subs	r3, #65	; 0x41
 80006a6:	221f      	movs	r2, #31
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	4019      	ands	r1, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	4613      	mov	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	3b41      	subs	r3, #65	; 0x41
 80006c0:	fa00 f203 	lsl.w	r2, r0, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	430a      	orrs	r2, r1
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d91c      	bls.n	800070e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68d9      	ldr	r1, [r3, #12]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	3b1e      	subs	r3, #30
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4019      	ands	r1, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	6898      	ldr	r0, [r3, #8]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	3b1e      	subs	r3, #30
 8000700:	fa00 f203 	lsl.w	r2, r0, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	430a      	orrs	r2, r1
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	e019      	b.n	8000742 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6919      	ldr	r1, [r3, #16]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	2207      	movs	r2, #7
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	4019      	ands	r1, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	fa00 f203 	lsl.w	r2, r0, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	430a      	orrs	r2, r1
 8000740:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b10      	cmp	r3, #16
 8000748:	d003      	beq.n	8000752 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800074e:	2b11      	cmp	r3, #17
 8000750:	d132      	bne.n	80007b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <HAL_ADC_ConfigChannel+0x1e4>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d125      	bne.n	80007a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d126      	bne.n	80007b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000778:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b10      	cmp	r3, #16
 8000780:	d11a      	bne.n	80007b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	0c9a      	lsrs	r2, r3, #18
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000798:	e002      	b.n	80007a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3b01      	subs	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f9      	bne.n	800079a <HAL_ADC_ConfigChannel+0x1b2>
 80007a6:	e007      	b.n	80007b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	f043 0220 	orr.w	r2, r3, #32
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40012400 	.word	0x40012400
 80007d0:	20000008 	.word	0x20000008
 80007d4:	431bde83 	.word	0x431bde83

080007d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d040      	beq.n	8000878 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f042 0201 	orr.w	r2, r2, #1
 8000804:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <ADC_Enable+0xac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <ADC_Enable+0xb0>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9b      	lsrs	r3, r3, #18
 8000812:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000814:	e002      	b.n	800081c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	3b01      	subs	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f9      	bne.n	8000816 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000822:	f7ff fceb 	bl	80001fc <HAL_GetTick>
 8000826:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000828:	e01f      	b.n	800086a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800082a:	f7ff fce7 	bl	80001fc <HAL_GetTick>
 800082e:	4602      	mov	r2, r0
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b02      	cmp	r3, #2
 8000836:	d918      	bls.n	800086a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	2b01      	cmp	r3, #1
 8000844:	d011      	beq.n	800086a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	f043 0210 	orr.w	r2, r3, #16
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	f043 0201 	orr.w	r2, r3, #1
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e007      	b.n	800087a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b01      	cmp	r3, #1
 8000876:	d1d8      	bne.n	800082a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	431bde83 	.word	0x431bde83

0800088c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d12e      	bne.n	8000904 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f022 0201 	bic.w	r2, r2, #1
 80008b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80008b6:	f7ff fca1 	bl	80001fc <HAL_GetTick>
 80008ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008bc:	e01b      	b.n	80008f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008be:	f7ff fc9d 	bl	80001fc <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d914      	bls.n	80008f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10d      	bne.n	80008f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008de:	f043 0210 	orr.w	r2, r3, #16
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ea:	f043 0201 	orr.w	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e007      	b.n	8000906 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b01      	cmp	r3, #1
 8000902:	d0dc      	beq.n	80008be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000924:	2b00      	cmp	r3, #0
 8000926:	d127      	bne.n	8000978 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800093e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000942:	d115      	bne.n	8000970 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000948:	2b00      	cmp	r3, #0
 800094a:	d111      	bne.n	8000970 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f002 fa21 	bl	8002db8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000976:	e004      	b.n	8000982 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6a1b      	ldr	r3, [r3, #32]
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	4798      	blx	r3
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000996:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fe13 	bl	80005c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b084      	sub	sp, #16
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f043 0204 	orr.w	r2, r3, #4
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fe02 	bl	80005d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d101      	bne.n	80009fa <HAL_ADCEx_Calibration_Start+0x1e>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e095      	b.n	8000b26 <HAL_ADCEx_Calibration_Start+0x14a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ff42 	bl	800088c <ADC_ConversionStop_Disable>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8084 	bne.w	8000b1c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a1c:	f023 0302 	bic.w	r3, r3, #2
 8000a20:	f043 0202 	orr.w	r2, r3, #2
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a28:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <HAL_ADCEx_Calibration_Start+0x154>)
 8000a2a:	681c      	ldr	r4, [r3, #0]
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f001 f9bd 	bl	8001dac <HAL_RCCEx_GetPeriphCLKFreq>
 8000a32:	4603      	mov	r3, r0
 8000a34:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000a38:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000a3a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000a3c:	e002      	b.n	8000a44 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1f9      	bne.n	8000a3e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fec4 	bl	80007d8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000a60:	f7ff fbcc 	bl	80001fc <HAL_GetTick>
 8000a64:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000a66:	e01b      	b.n	8000aa0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000a68:	f7ff fbc8 	bl	80001fc <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b0a      	cmp	r3, #10
 8000a74:	d914      	bls.n	8000aa0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00d      	beq.n	8000aa0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	f023 0312 	bic.w	r3, r3, #18
 8000a8c:	f043 0210 	orr.w	r2, r3, #16
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e042      	b.n	8000b26 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1dc      	bne.n	8000a68 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f042 0204 	orr.w	r2, r2, #4
 8000abc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000abe:	f7ff fb9d 	bl	80001fc <HAL_GetTick>
 8000ac2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000ac4:	e01b      	b.n	8000afe <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000ac6:	f7ff fb99 	bl	80001fc <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	d914      	bls.n	8000afe <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00d      	beq.n	8000afe <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae6:	f023 0312 	bic.w	r3, r3, #18
 8000aea:	f043 0210 	orr.w	r2, r3, #16
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e013      	b.n	8000b26 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1dc      	bne.n	8000ac6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f023 0303 	bic.w	r3, r3, #3
 8000b14:	f043 0201 	orr.w	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <__NVIC_EnableIRQ+0x34>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff90 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff2d 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff42 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff35 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e043      	b.n	8000dee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <HAL_DMA_Init+0xa8>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <HAL_DMA_Init+0xac>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	009a      	lsls	r2, r3, #2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <HAL_DMA_Init+0xb0>)
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2202      	movs	r2, #2
 8000d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	bffdfff8 	.word	0xbffdfff8
 8000dfc:	cccccccd 	.word	0xcccccccd
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_DMA_Start_IT+0x20>
 8000e20:	2302      	movs	r3, #2
 8000e22:	e04a      	b.n	8000eba <HAL_DMA_Start_IT+0xb6>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d13a      	bne.n	8000eac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 f938 	bl	80010d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 020e 	orr.w	r2, r2, #14
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e00f      	b.n	8000e9a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0204 	bic.w	r2, r2, #4
 8000e88:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 020a 	orr.w	r2, r2, #10
 8000e98:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0201 	orr.w	r2, r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e005      	b.n	8000eb8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d04f      	beq.n	8000f8c <HAL_DMA_IRQHandler+0xc8>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d04a      	beq.n	8000f8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0320 	and.w	r3, r3, #32
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d107      	bne.n	8000f14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0204 	bic.w	r2, r2, #4
 8000f12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a66      	ldr	r2, [pc, #408]	; (80010b4 <HAL_DMA_IRQHandler+0x1f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d029      	beq.n	8000f72 <HAL_DMA_IRQHandler+0xae>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a65      	ldr	r2, [pc, #404]	; (80010b8 <HAL_DMA_IRQHandler+0x1f4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d022      	beq.n	8000f6e <HAL_DMA_IRQHandler+0xaa>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a63      	ldr	r2, [pc, #396]	; (80010bc <HAL_DMA_IRQHandler+0x1f8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01a      	beq.n	8000f68 <HAL_DMA_IRQHandler+0xa4>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a62      	ldr	r2, [pc, #392]	; (80010c0 <HAL_DMA_IRQHandler+0x1fc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d012      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x9e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a60      	ldr	r2, [pc, #384]	; (80010c4 <HAL_DMA_IRQHandler+0x200>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00a      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x98>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a5f      	ldr	r2, [pc, #380]	; (80010c8 <HAL_DMA_IRQHandler+0x204>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d102      	bne.n	8000f56 <HAL_DMA_IRQHandler+0x92>
 8000f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f54:	e00e      	b.n	8000f74 <HAL_DMA_IRQHandler+0xb0>
 8000f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f5a:	e00b      	b.n	8000f74 <HAL_DMA_IRQHandler+0xb0>
 8000f5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f60:	e008      	b.n	8000f74 <HAL_DMA_IRQHandler+0xb0>
 8000f62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f66:	e005      	b.n	8000f74 <HAL_DMA_IRQHandler+0xb0>
 8000f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6c:	e002      	b.n	8000f74 <HAL_DMA_IRQHandler+0xb0>
 8000f6e:	2340      	movs	r3, #64	; 0x40
 8000f70:	e000      	b.n	8000f74 <HAL_DMA_IRQHandler+0xb0>
 8000f72:	2304      	movs	r3, #4
 8000f74:	4a55      	ldr	r2, [pc, #340]	; (80010cc <HAL_DMA_IRQHandler+0x208>)
 8000f76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8094 	beq.w	80010aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f8a:	e08e      	b.n	80010aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2202      	movs	r2, #2
 8000f92:	409a      	lsls	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d056      	beq.n	800104a <HAL_DMA_IRQHandler+0x186>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d051      	beq.n	800104a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10b      	bne.n	8000fcc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 020a 	bic.w	r2, r2, #10
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <HAL_DMA_IRQHandler+0x1f0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d029      	beq.n	800102a <HAL_DMA_IRQHandler+0x166>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <HAL_DMA_IRQHandler+0x1f4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d022      	beq.n	8001026 <HAL_DMA_IRQHandler+0x162>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a35      	ldr	r2, [pc, #212]	; (80010bc <HAL_DMA_IRQHandler+0x1f8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01a      	beq.n	8001020 <HAL_DMA_IRQHandler+0x15c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a34      	ldr	r2, [pc, #208]	; (80010c0 <HAL_DMA_IRQHandler+0x1fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d012      	beq.n	800101a <HAL_DMA_IRQHandler+0x156>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_DMA_IRQHandler+0x200>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00a      	beq.n	8001014 <HAL_DMA_IRQHandler+0x150>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_DMA_IRQHandler+0x204>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d102      	bne.n	800100e <HAL_DMA_IRQHandler+0x14a>
 8001008:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800100c:	e00e      	b.n	800102c <HAL_DMA_IRQHandler+0x168>
 800100e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001012:	e00b      	b.n	800102c <HAL_DMA_IRQHandler+0x168>
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	e008      	b.n	800102c <HAL_DMA_IRQHandler+0x168>
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	e005      	b.n	800102c <HAL_DMA_IRQHandler+0x168>
 8001020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001024:	e002      	b.n	800102c <HAL_DMA_IRQHandler+0x168>
 8001026:	2320      	movs	r3, #32
 8001028:	e000      	b.n	800102c <HAL_DMA_IRQHandler+0x168>
 800102a:	2302      	movs	r3, #2
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <HAL_DMA_IRQHandler+0x208>)
 800102e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	2b00      	cmp	r3, #0
 800103e:	d034      	beq.n	80010aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001048:	e02f      	b.n	80010aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2208      	movs	r2, #8
 8001050:	409a      	lsls	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d028      	beq.n	80010ac <HAL_DMA_IRQHandler+0x1e8>
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 020e 	bic.w	r2, r2, #14
 8001072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	4798      	blx	r3
    }
  }
  return;
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
}
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020008 	.word	0x40020008
 80010b8:	4002001c 	.word	0x4002001c
 80010bc:	40020030 	.word	0x40020030
 80010c0:	40020044 	.word	0x40020044
 80010c4:	40020058 	.word	0x40020058
 80010c8:	4002006c 	.word	0x4002006c
 80010cc:	40020000 	.word	0x40020000

080010d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d108      	bne.n	8001110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800110e:	e007      	b.n	8001120 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	60da      	str	r2, [r3, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	; 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e169      	b.n	8001414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001140:	2201      	movs	r2, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8158 	bne.w	800140e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a9a      	ldr	r2, [pc, #616]	; (80013cc <HAL_GPIO_Init+0x2a0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d05e      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001168:	4a98      	ldr	r2, [pc, #608]	; (80013cc <HAL_GPIO_Init+0x2a0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d875      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800116e:	4a98      	ldr	r2, [pc, #608]	; (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d058      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001174:	4a96      	ldr	r2, [pc, #600]	; (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d86f      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800117a:	4a96      	ldr	r2, [pc, #600]	; (80013d4 <HAL_GPIO_Init+0x2a8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d052      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001180:	4a94      	ldr	r2, [pc, #592]	; (80013d4 <HAL_GPIO_Init+0x2a8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d869      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001186:	4a94      	ldr	r2, [pc, #592]	; (80013d8 <HAL_GPIO_Init+0x2ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d04c      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 800118c:	4a92      	ldr	r2, [pc, #584]	; (80013d8 <HAL_GPIO_Init+0x2ac>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d863      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001192:	4a92      	ldr	r2, [pc, #584]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d046      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001198:	4a90      	ldr	r2, [pc, #576]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d85d      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d82a      	bhi.n	80011f8 <HAL_GPIO_Init+0xcc>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d859      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <HAL_GPIO_Init+0x80>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001201 	.word	0x08001201
 80011b4:	08001213 	.word	0x08001213
 80011b8:	08001255 	.word	0x08001255
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	0800125b 	.word	0x0800125b
 80011c4:	0800125b 	.word	0x0800125b
 80011c8:	0800125b 	.word	0x0800125b
 80011cc:	0800125b 	.word	0x0800125b
 80011d0:	0800125b 	.word	0x0800125b
 80011d4:	0800125b 	.word	0x0800125b
 80011d8:	0800125b 	.word	0x0800125b
 80011dc:	0800125b 	.word	0x0800125b
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	0800125b 	.word	0x0800125b
 80011e8:	0800125b 	.word	0x0800125b
 80011ec:	0800125b 	.word	0x0800125b
 80011f0:	08001209 	.word	0x08001209
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	4a79      	ldr	r2, [pc, #484]	; (80013e0 <HAL_GPIO_Init+0x2b4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fe:	e02c      	b.n	800125a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e029      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	3304      	adds	r3, #4
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e024      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	3308      	adds	r3, #8
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e01f      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	330c      	adds	r3, #12
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e01a      	b.n	800125c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122e:	2304      	movs	r3, #4
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e013      	b.n	800125c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	611a      	str	r2, [r3, #16]
          break;
 8001246:	e009      	b.n	800125c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	615a      	str	r2, [r3, #20]
          break;
 8001252:	e003      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x130>
          break;
 800125a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2bff      	cmp	r3, #255	; 0xff
 8001260:	d801      	bhi.n	8001266 <HAL_GPIO_Init+0x13a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	e001      	b.n	800126a <HAL_GPIO_Init+0x13e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3304      	adds	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d802      	bhi.n	8001278 <HAL_GPIO_Init+0x14c>
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x152>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	3b08      	subs	r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	210f      	movs	r1, #15
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	6a39      	ldr	r1, [r7, #32]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80b1 	beq.w	800140e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_GPIO_Init+0x2bc>)
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a40      	ldr	r2, [pc, #256]	; (80013ec <HAL_GPIO_Init+0x2c0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1ec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <HAL_GPIO_Init+0x2c4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1e8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e0>
 8001308:	2303      	movs	r3, #3
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 800130c:	2304      	movs	r3, #4
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001318:	2300      	movs	r3, #0
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132a:	492f      	ldr	r1, [pc, #188]	; (80013e8 <HAL_GPIO_Init+0x2bc>)
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	492c      	ldr	r1, [pc, #176]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	4928      	ldr	r1, [pc, #160]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4922      	ldr	r1, [pc, #136]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	491e      	ldr	r1, [pc, #120]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	4918      	ldr	r1, [pc, #96]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4914      	ldr	r1, [pc, #80]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d021      	beq.n	8001400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	490e      	ldr	r1, [pc, #56]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60cb      	str	r3, [r1, #12]
 80013c8:	e021      	b.n	800140e <HAL_GPIO_Init+0x2e2>
 80013ca:	bf00      	nop
 80013cc:	10320000 	.word	0x10320000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10220000 	.word	0x10220000
 80013d8:	10210000 	.word	0x10210000
 80013dc:	10120000 	.word	0x10120000
 80013e0:	10110000 	.word	0x10110000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40011400 	.word	0x40011400
 80013fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_GPIO_Init+0x304>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	4909      	ldr	r1, [pc, #36]	; (8001430 <HAL_GPIO_Init+0x304>)
 800140a:	4013      	ands	r3, r2
 800140c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae8e 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	372c      	adds	r7, #44	; 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e26c      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8087 	beq.w	8001562 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001454:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b04      	cmp	r3, #4
 800145e:	d00c      	beq.n	800147a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001460:	4b8f      	ldr	r3, [pc, #572]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d112      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 800146c:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06c      	beq.n	8001560 <HAL_RCC_OscConfig+0x12c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d168      	bne.n	8001560 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e246      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d106      	bne.n	80014aa <HAL_RCC_OscConfig+0x76>
 800149c:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a7f      	ldr	r2, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	e02e      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0xbc>
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0xd4>
 80014f0:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6a      	ldr	r2, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a67      	ldr	r2, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7fe fe74 	bl	80001fc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7fe fe70 	bl	80001fc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1fa      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0xe4>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7fe fe60 	bl	80001fc <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7fe fe5c 	bl	80001fc <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e1e6      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x10c>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d063      	beq.n	8001636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e1ba      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4939      	ldr	r1, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e03a      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7fe fe15 	bl	80001fc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7fe fe11 	bl	80001fc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e19b      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4927      	ldr	r1, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7fe fdf4 	bl	80001fc <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001618:	f7fe fdf0 	bl	80001fc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e17a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d03a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7fe fdd4 	bl	80001fc <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7fe fdd0 	bl	80001fc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e15a      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_RCC_OscConfig+0x26c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f000 fac4 	bl	8001c04 <RCC_Delay>
 800167c:	e01c      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7fe fdba 	bl	80001fc <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7fe fdb6 	bl	80001fc <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d908      	bls.n	80016ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e140      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	42420000 	.word	0x42420000
 80016a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b9e      	ldr	r3, [pc, #632]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e9      	bne.n	800168c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a6 	beq.w	8001812 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b97      	ldr	r3, [pc, #604]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b94      	ldr	r3, [pc, #592]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a93      	ldr	r2, [pc, #588]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b91      	ldr	r3, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b8e      	ldr	r3, [pc, #568]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7fe fd77 	bl	80001fc <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7fe fd73 	bl	80001fc <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0fd      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x4f8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x312>
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a7a      	ldr	r2, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x334>
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a72      	ldr	r2, [pc, #456]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x356>
 8001770:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x36e>
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7fe fd27 	bl	80001fc <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7fe fd23 	bl	80001fc <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0ab      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x37e>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7fe fd11 	bl	80001fc <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7fe fd0d 	bl	80001fc <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e095      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8081 	beq.w	800191e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b42      	ldr	r3, [pc, #264]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d061      	beq.n	80018ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d146      	bne.n	80018be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7fe fce1 	bl	80001fc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7fe fcdd 	bl	80001fc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e067      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	492d      	ldr	r1, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a19      	ldr	r1, [r3, #32]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	430b      	orrs	r3, r1
 800188a:	4927      	ldr	r1, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7fe fcb1 	bl	80001fc <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7fe fcad 	bl	80001fc <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e037      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x46a>
 80018bc:	e02f      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_OscConfig+0x4fc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7fe fc9a 	bl	80001fc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe fc96 	bl	80001fc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e020      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e013      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	42420060 	.word	0x42420060

08001934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0d0      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4965      	ldr	r1, [pc, #404]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0b8      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800199a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a52      	ldr	r2, [pc, #328]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	494d      	ldr	r1, [pc, #308]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e07f      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e073      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06b      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f023 0203 	bic.w	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4936      	ldr	r1, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7fe fbea 	bl	80001fc <HAL_GetTick>
 8001a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7fe fbe6 	bl	80001fc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e053      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 020c 	and.w	r2, r3, #12
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1eb      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d210      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e032      	b.n	8001aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4916      	ldr	r1, [pc, #88]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac2:	f000 f821 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	490a      	ldr	r1, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	5ccb      	ldrb	r3, [r1, r3]
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_ClockConfig+0x1cc>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb48 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08003100 	.word	0x08003100
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b490      	push	{r4, r7}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b10:	1d3c      	adds	r4, r7, #4
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b18:	f240 2301 	movw	r3, #513	; 0x201
 8001b1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x40>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x46>
 8001b46:	e02d      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4a:	623b      	str	r3, [r7, #32]
      break;
 8001b4c:	e02d      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b86:	fb02 f203 	mul.w	r2, r2, r3
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	e004      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	623b      	str	r3, [r7, #32]
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba6:	623b      	str	r3, [r7, #32]
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc90      	pop	{r4, r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	080030e0 	.word	0x080030e0
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	003d0900 	.word	0x003d0900

08001bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000008 	.word	0x20000008

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001be0:	f7ff fff2 	bl	8001bc8 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0adb      	lsrs	r3, r3, #11
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08003110 	.word	0x08003110

08001c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <RCC_Delay+0x34>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <RCC_Delay+0x38>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0a5b      	lsrs	r3, r3, #9
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c20:	bf00      	nop
  }
  while (Delay --);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	60fa      	str	r2, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f9      	bne.n	8001c20 <RCC_Delay+0x1c>
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d07d      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	61d3      	str	r3, [r2, #28]
 8001c78:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d118      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a42      	ldr	r2, [pc, #264]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca0:	f7fe faac 	bl	80001fc <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	e008      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca8:	f7fe faa8 	bl	80001fc <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e06d      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc6:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d02e      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d027      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d014      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fa77 	bl	80001fc <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe fa73 	bl	80001fc <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e036      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ee      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4917      	ldr	r1, [pc, #92]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	490b      	ldr	r1, [pc, #44]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4904      	ldr	r1, [pc, #16]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
 8001da8:	42420440 	.word	0x42420440

08001dac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b08d      	sub	sp, #52	; 0x34
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001db4:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001db6:	f107 040c 	add.w	r4, r7, #12
 8001dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dc0:	f240 2301 	movw	r3, #513	; 0x201
 8001dc4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	f200 8091 	bhi.w	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d04c      	beq.n	8001e88 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d07c      	beq.n	8001eee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001df4:	e089      	b.n	8001f0a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001df6:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8082 	beq.w	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	0c9b      	lsrs	r3, r3, #18
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e16:	4413      	add	r3, r2
 8001e18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e1c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d018      	beq.n	8001e5a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	0c5b      	lsrs	r3, r3, #17
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e36:	4413      	add	r3, r2
 8001e38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e48:	4a37      	ldr	r2, [pc, #220]	; (8001f28 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	e004      	b.n	8001e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	4a33      	ldr	r2, [pc, #204]	; (8001f2c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e64:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e70:	d102      	bne.n	8001e78 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e76:	e04a      	b.n	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4a2c      	ldr	r2, [pc, #176]	; (8001f30 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001e86:	e042      	b.n	8001f0e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e98:	d108      	bne.n	8001eac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eaa:	e01f      	b.n	8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001ec4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eca:	e00f      	b.n	8001eec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ed6:	d11c      	bne.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d016      	beq.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001ee4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001eea:	e012      	b.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001eec:	e011      	b.n	8001f12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001eee:	f7ff fe75 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0b9b      	lsrs	r3, r3, #14
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f08:	e004      	b.n	8001f14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f12:	bf00      	nop
    }
  }
  return (frequency);
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3734      	adds	r7, #52	; 0x34
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	080030f0 	.word	0x080030f0
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	003d0900 	.word	0x003d0900
 8001f30:	aaaaaaab 	.word	0xaaaaaaab

08001f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e041      	b.n	8001fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 ffde 	bl	8002f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 faaa 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e041      	b.n	8002068 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d106      	bne.n	8001ffe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f839 	bl	8002070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f000 fa5b 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_TIM_PWM_Start+0x24>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e022      	b.n	80020ee <HAL_TIM_PWM_Start+0x6a>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d109      	bne.n	80020c2 <HAL_TIM_PWM_Start+0x3e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e015      	b.n	80020ee <HAL_TIM_PWM_Start+0x6a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d109      	bne.n	80020dc <HAL_TIM_PWM_Start+0x58>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e008      	b.n	80020ee <HAL_TIM_PWM_Start+0x6a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e05e      	b.n	80021b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_PWM_Start+0x82>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002104:	e013      	b.n	800212e <HAL_TIM_PWM_Start+0xaa>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d104      	bne.n	8002116 <HAL_TIM_PWM_Start+0x92>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	e00b      	b.n	800212e <HAL_TIM_PWM_Start+0xaa>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d104      	bne.n	8002126 <HAL_TIM_PWM_Start+0xa2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002124:	e003      	b.n	800212e <HAL_TIM_PWM_Start+0xaa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2201      	movs	r2, #1
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fc48 	bl	80029cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_TIM_PWM_Start+0x138>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d107      	bne.n	8002156 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_TIM_PWM_Start+0x138>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_TIM_PWM_Start+0xfa>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d009      	beq.n	800217e <HAL_TIM_PWM_Start+0xfa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_TIM_PWM_Start+0x13c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_TIM_PWM_Start+0xfa>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <HAL_TIM_PWM_Start+0x140>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d111      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d010      	beq.n	80021b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	e007      	b.n	80021b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021de:	2302      	movs	r3, #2
 80021e0:	e0ac      	b.n	800233c <HAL_TIM_PWM_ConfigChannel+0x174>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	f200 809f 	bhi.w	8002330 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	08002331 	.word	0x08002331
 8002200:	08002331 	.word	0x08002331
 8002204:	08002331 	.word	0x08002331
 8002208:	0800226d 	.word	0x0800226d
 800220c:	08002331 	.word	0x08002331
 8002210:	08002331 	.word	0x08002331
 8002214:	08002331 	.word	0x08002331
 8002218:	080022af 	.word	0x080022af
 800221c:	08002331 	.word	0x08002331
 8002220:	08002331 	.word	0x08002331
 8002224:	08002331 	.word	0x08002331
 8002228:	080022ef 	.word	0x080022ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f9ac 	bl	8002590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0208 	orr.w	r2, r2, #8
 8002246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0204 	bic.w	r2, r2, #4
 8002256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6999      	ldr	r1, [r3, #24]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	619a      	str	r2, [r3, #24]
      break;
 800226a:	e062      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f9f2 	bl	800265c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6999      	ldr	r1, [r3, #24]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	021a      	lsls	r2, r3, #8
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]
      break;
 80022ac:	e041      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fa3b 	bl	8002730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0208 	orr.w	r2, r2, #8
 80022c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0204 	bic.w	r2, r2, #4
 80022d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69d9      	ldr	r1, [r3, #28]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	61da      	str	r2, [r3, #28]
      break;
 80022ec:	e021      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fa85 	bl	8002804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69d9      	ldr	r1, [r3, #28]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	61da      	str	r2, [r3, #28]
      break;
 800232e:	e000      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_TIM_ConfigClockSource+0x18>
 8002358:	2302      	movs	r3, #2
 800235a:	e0b3      	b.n	80024c4 <HAL_TIM_ConfigClockSource+0x180>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800237a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002394:	d03e      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0xd0>
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	f200 8087 	bhi.w	80024ac <HAL_TIM_ConfigClockSource+0x168>
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	f000 8085 	beq.w	80024b0 <HAL_TIM_ConfigClockSource+0x16c>
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	d87f      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b70      	cmp	r3, #112	; 0x70
 80023ae:	d01a      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0xa2>
 80023b0:	2b70      	cmp	r3, #112	; 0x70
 80023b2:	d87b      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b60      	cmp	r3, #96	; 0x60
 80023b6:	d050      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x116>
 80023b8:	2b60      	cmp	r3, #96	; 0x60
 80023ba:	d877      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023bc:	2b50      	cmp	r3, #80	; 0x50
 80023be:	d03c      	beq.n	800243a <HAL_TIM_ConfigClockSource+0xf6>
 80023c0:	2b50      	cmp	r3, #80	; 0x50
 80023c2:	d873      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d058      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x136>
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d86f      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023cc:	2b30      	cmp	r3, #48	; 0x30
 80023ce:	d064      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x156>
 80023d0:	2b30      	cmp	r3, #48	; 0x30
 80023d2:	d86b      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d060      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x156>
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d867      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05c      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x156>
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d05a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023e4:	e062      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f000 faca 	bl	800298e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	609a      	str	r2, [r3, #8]
      break;
 8002412:	e04e      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f000 fab3 	bl	800298e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002436:	609a      	str	r2, [r3, #8]
      break;
 8002438:	e03b      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	f000 fa2a 	bl	80028a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2150      	movs	r1, #80	; 0x50
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fa81 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 8002458:	e02b      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	461a      	mov	r2, r3
 8002468:	f000 fa48 	bl	80028fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2160      	movs	r1, #96	; 0x60
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fa71 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 8002478:	e01b      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	461a      	mov	r2, r3
 8002488:	f000 fa0a 	bl	80028a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2140      	movs	r1, #64	; 0x40
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fa61 	bl	800295a <TIM_ITRx_SetConfig>
      break;
 8002498:	e00b      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f000 fa58 	bl	800295a <TIM_ITRx_SetConfig>
        break;
 80024aa:	e002      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a29      	ldr	r2, [pc, #164]	; (8002584 <TIM_Base_SetConfig+0xb8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00b      	beq.n	80024fc <TIM_Base_SetConfig+0x30>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d007      	beq.n	80024fc <TIM_Base_SetConfig+0x30>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a26      	ldr	r2, [pc, #152]	; (8002588 <TIM_Base_SetConfig+0xbc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d003      	beq.n	80024fc <TIM_Base_SetConfig+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a25      	ldr	r2, [pc, #148]	; (800258c <TIM_Base_SetConfig+0xc0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d108      	bne.n	800250e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <TIM_Base_SetConfig+0xb8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00b      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d007      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a19      	ldr	r2, [pc, #100]	; (8002588 <TIM_Base_SetConfig+0xbc>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a18      	ldr	r2, [pc, #96]	; (800258c <TIM_Base_SetConfig+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d108      	bne.n	8002540 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <TIM_Base_SetConfig+0xb8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d103      	bne.n	8002574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	615a      	str	r2, [r3, #20]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400
 800258c:	40000800 	.word	0x40000800

08002590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 0302 	bic.w	r3, r3, #2
 80025d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <TIM_OC1_SetConfig+0xc8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d10c      	bne.n	8002606 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f023 0308 	bic.w	r3, r3, #8
 80025f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <TIM_OC1_SetConfig+0xc8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d111      	bne.n	8002632 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800261c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	621a      	str	r2, [r3, #32]
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40012c00 	.word	0x40012c00

0800265c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f023 0210 	bic.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0320 	bic.w	r3, r3, #32
 80026a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <TIM_OC2_SetConfig+0xd0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10d      	bne.n	80026d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <TIM_OC2_SetConfig+0xd0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d113      	bne.n	8002708 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00

08002730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <TIM_OC3_SetConfig+0xd0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10d      	bne.n	80027aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <TIM_OC3_SetConfig+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d113      	bne.n	80027da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00

08002804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800284e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	031b      	lsls	r3, r3, #12
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <TIM_OC4_SetConfig+0x98>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d109      	bne.n	8002878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800286a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40012c00 	.word	0x40012c00

080028a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f023 0201 	bic.w	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f023 030a 	bic.w	r3, r3, #10
 80028dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	621a      	str	r2, [r3, #32]
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f023 0210 	bic.w	r2, r3, #16
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002926:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	031b      	lsls	r3, r3, #12
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	f043 0307 	orr.w	r3, r3, #7
 800297c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800298e:	b480      	push	{r7}
 8002990:	b087      	sub	sp, #28
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	021a      	lsls	r2, r3, #8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	609a      	str	r2, [r3, #8]
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2201      	movs	r2, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1a      	ldr	r2, [r3, #32]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	401a      	ands	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e046      	b.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d009      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ad4:	f7fd fb3a 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad8:	f000 f81e 	bl	8002b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002adc:	f000 f94a 	bl	8002d74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002ae0:	f000 f876 	bl	8002bd0 <MX_ADC1_Init>
  MX_DMA_Init();
 8002ae4:	f000 f928 	bl	8002d38 <MX_DMA_Init>
  MX_TIM2_Init();
 8002ae8:	f000 f8b0 	bl	8002c4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002aec:	2100      	movs	r1, #0
 8002aee:	4807      	ldr	r0, [pc, #28]	; (8002b0c <main+0x3c>)
 8002af0:	f7ff fac8 	bl	8002084 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002af4:	4806      	ldr	r0, [pc, #24]	; (8002b10 <main+0x40>)
 8002af6:	f7fd ff71 	bl	80009dc <HAL_ADCEx_Calibration_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Start ADC Conversion
      // Pass (The ADC Instance, Result Buffer Address, Buffer Length)
      HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 8002afa:	2201      	movs	r2, #1
 8002afc:	4905      	ldr	r1, [pc, #20]	; (8002b14 <main+0x44>)
 8002afe:	4804      	ldr	r0, [pc, #16]	; (8002b10 <main+0x40>)
 8002b00:	f7fd fc82 	bl	8000408 <HAL_ADC_Start_DMA>
      HAL_Delay(1);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7fd fb83 	bl	8000210 <HAL_Delay>
      HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 8002b0a:	e7f6      	b.n	8002afa <main+0x2a>
 8002b0c:	200000a4 	.word	0x200000a4
 8002b10:	20000030 	.word	0x20000030
 8002b14:	2000002c 	.word	0x2000002c

08002b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b094      	sub	sp, #80	; 0x50
 8002b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	2228      	movs	r2, #40	; 0x28
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fac6 	bl	80030b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b52:	2300      	movs	r3, #0
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b56:	2301      	movs	r3, #1
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fc60 	bl	8001434 <HAL_RCC_OscConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002b7a:	f000 f92f 	bl	8002ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7e:	230f      	movs	r3, #15
 8002b80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe feca 	bl	8001934 <HAL_RCC_ClockConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002ba6:	f000 f919 	bl	8002ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002baa:	2302      	movs	r3, #2
 8002bac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f842 	bl	8001c40 <HAL_RCCEx_PeriphCLKConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002bc2:	f000 f90b 	bl	8002ddc <Error_Handler>
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3750      	adds	r7, #80	; 0x50
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002be2:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <MX_ADC1_Init+0x78>)
 8002be4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002bfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c0c:	480d      	ldr	r0, [pc, #52]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002c0e:	f7fd fb23 	bl	8000258 <HAL_ADC_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002c18:	f000 f8e0 	bl	8002ddc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_ADC1_Init+0x74>)
 8002c2e:	f7fd fcdb 	bl	80005e8 <HAL_ADC_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002c38:	f000 f8d0 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000030 	.word	0x20000030
 8002c48:	40012400 	.word	0x40012400

08002c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	f107 0320 	add.w	r3, r7, #32
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
 8002c78:	615a      	str	r2, [r3, #20]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c98:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ca4:	4823      	ldr	r0, [pc, #140]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002ca6:	f7ff f945 	bl	8001f34 <HAL_TIM_Base_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002cb0:	f000 f894 	bl	8002ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	481c      	ldr	r0, [pc, #112]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002cc2:	f7ff fb3f 	bl	8002344 <HAL_TIM_ConfigClockSource>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002ccc:	f000 f886 	bl	8002ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cd0:	4818      	ldr	r0, [pc, #96]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002cd2:	f7ff f97e 	bl	8001fd2 <HAL_TIM_PWM_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002cdc:	f000 f87e 	bl	8002ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce8:	f107 0320 	add.w	r3, r7, #32
 8002cec:	4619      	mov	r1, r3
 8002cee:	4811      	ldr	r0, [pc, #68]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002cf0:	f7ff fe90 	bl	8002a14 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002cfa:	f000 f86f 	bl	8002ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cfe:	2360      	movs	r3, #96	; 0x60
 8002d00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2204      	movs	r2, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002d16:	f7ff fa57 	bl	80021c8 <HAL_TIM_PWM_ConfigChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d20:	f000 f85c 	bl	8002ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <MX_TIM2_Init+0xe8>)
 8002d26:	f000 f915 	bl	8002f54 <HAL_TIM_MspPostInit>

}
 8002d2a:	bf00      	nop
 8002d2c:	3738      	adds	r7, #56	; 0x38
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200000a4 	.word	0x200000a4

08002d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <MX_DMA_Init+0x38>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <MX_DMA_Init+0x38>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6153      	str	r3, [r2, #20]
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_DMA_Init+0x38>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	200b      	movs	r0, #11
 8002d5c:	f7fd ffc1 	bl	8000ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d60:	200b      	movs	r0, #11
 8002d62:	f7fd ffda 	bl	8000d1a <HAL_NVIC_EnableIRQ>

}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <MX_GPIO_Init+0x40>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <MX_GPIO_Init+0x40>)
 8002d80:	f043 0320 	orr.w	r3, r3, #32
 8002d84:	6193      	str	r3, [r2, #24]
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <MX_GPIO_Init+0x40>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <MX_GPIO_Init+0x40>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <MX_GPIO_Init+0x40>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6193      	str	r3, [r2, #24]
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <MX_GPIO_Init+0x40>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]

}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
    TIM2->CCR1 = (adc_value<<4);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_ADC_ConvCpltCallback+0x20>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	011a      	lsls	r2, r3, #4
 8002dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	2000002c 	.word	0x2000002c

08002ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de0:	b672      	cpsid	i
}
 8002de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <Error_Handler+0x8>
	...

08002de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_MspInit+0x5c>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_MspInit+0x5c>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6193      	str	r3, [r2, #24]
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_MspInit+0x5c>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_MspInit+0x5c>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_MspInit+0x5c>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	61d3      	str	r3, [r2, #28]
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_MspInit+0x5c>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_MspInit+0x60>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_MspInit+0x60>)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40010000 	.word	0x40010000

08002e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_ADC_MspInit+0xbc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d149      	bne.n	8002f00 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_ADC_MspInit+0xc0>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_ADC_MspInit+0xc0>)
 8002e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_ADC_MspInit+0xc0>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_ADC_MspInit+0xc0>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <HAL_ADC_MspInit+0xc0>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_ADC_MspInit+0xc0>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4819      	ldr	r0, [pc, #100]	; (8002f10 <HAL_ADC_MspInit+0xc4>)
 8002eac:	f7fe f93e 	bl	800112c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_ADC_MspInit+0xcc>)
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ece:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ee4:	480b      	ldr	r0, [pc, #44]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002ee6:	f7fd ff33 	bl	8000d50 <HAL_DMA_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002ef0:	f7ff ff74 	bl	8002ddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002ef8:	621a      	str	r2, [r3, #32]
 8002efa:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <HAL_ADC_MspInit+0xc8>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f00:	bf00      	nop
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40012400 	.word	0x40012400
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010800 	.word	0x40010800
 8002f14:	20000060 	.word	0x20000060
 8002f18:	40020008 	.word	0x40020008

08002f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d10b      	bne.n	8002f46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_TIM_Base_MspInit+0x34>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <HAL_TIM_Base_MspInit+0x34>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	61d3      	str	r3, [r2, #28]
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_TIM_Base_MspInit+0x34>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d117      	bne.n	8002fa4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_TIM_MspPostInit+0x58>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <HAL_TIM_MspPostInit+0x58>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6193      	str	r3, [r2, #24]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_TIM_MspPostInit+0x58>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2302      	movs	r3, #2
 8002f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <HAL_TIM_MspPostInit+0x5c>)
 8002fa0:	f7fe f8c4 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fa4:	bf00      	nop
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010800 	.word	0x40010800

08002fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <NMI_Handler+0x4>

08002fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fbe:	e7fe      	b.n	8002fbe <HardFault_Handler+0x4>

08002fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <MemManage_Handler+0x4>

08002fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <BusFault_Handler+0x4>

08002fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <UsageFault_Handler+0x4>

08002fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ffa:	f7fd f8ed 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <DMA1_Channel1_IRQHandler+0x10>)
 800300a:	f7fd ff5b 	bl	8000ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000060 	.word	0x20000060

08003018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003026:	490d      	ldr	r1, [pc, #52]	; (800305c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800302c:	e002      	b.n	8003034 <LoopCopyDataInit>

0800302e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003032:	3304      	adds	r3, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003038:	d3f9      	bcc.n	800302e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800303c:	4c0a      	ldr	r4, [pc, #40]	; (8003068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003040:	e001      	b.n	8003046 <LoopFillZerobss>

08003042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003044:	3204      	adds	r2, #4

08003046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003048:	d3fb      	bcc.n	8003042 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800304a:	f7ff ffe5 	bl	8003018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f000 f80f 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003052:	f7ff fd3d 	bl	8002ad0 <main>
  bx lr
 8003056:	4770      	bx	lr
  ldr r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800305c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003060:	08003120 	.word	0x08003120
  ldr r2, =_sbss
 8003064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003068:	200000ec 	.word	0x200000ec

0800306c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC1_2_IRQHandler>
	...

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	2600      	movs	r6, #0
 8003074:	4d0c      	ldr	r5, [pc, #48]	; (80030a8 <__libc_init_array+0x38>)
 8003076:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003078:	1b64      	subs	r4, r4, r5
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	42a6      	cmp	r6, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	f000 f822 	bl	80030c8 <_init>
 8003084:	2600      	movs	r6, #0
 8003086:	4d0a      	ldr	r5, [pc, #40]	; (80030b0 <__libc_init_array+0x40>)
 8003088:	4c0a      	ldr	r4, [pc, #40]	; (80030b4 <__libc_init_array+0x44>)
 800308a:	1b64      	subs	r4, r4, r5
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	42a6      	cmp	r6, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f855 3b04 	ldr.w	r3, [r5], #4
 8003098:	4798      	blx	r3
 800309a:	3601      	adds	r6, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a2:	4798      	blx	r3
 80030a4:	3601      	adds	r6, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	08003118 	.word	0x08003118
 80030ac:	08003118 	.word	0x08003118
 80030b0:	08003118 	.word	0x08003118
 80030b4:	0800311c 	.word	0x0800311c

080030b8 <memset>:
 80030b8:	4603      	mov	r3, r0
 80030ba:	4402      	add	r2, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
